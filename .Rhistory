fu = readVCF(vcfpath)
if(nrow(fu)){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows = cnv_parse(cnv_rows)
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^3)
filtered = dplyr::select(vcf, 1:7, exon, AF, QUAL) |>
tidyr::unnest(cols = AF)
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
lapply(testfiles[1:5], quick_check)
quick_check = function(vcfpath){
fu = readVCF(vcfpath)
if(nrow(fu)>0){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
}
cnv_rows = cnv_parse(cnv_rows)
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^3)
filtered = dplyr::select(vcf, 1:7, exon, AF, QUAL) |>
tidyr::unnest(cols = AF)
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
lapply(testfiles[1:5], quick_check)
testfiles[1:5]
quick_check = function(vcfpath){
fu = readVCF(vcfpath)
if(nrow(fu)>0){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows = cnv_parse(cnv_rows)
}
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^3)
filtered = dplyr::select(vcf, 1:7, exon, AF, QUAL) |>
tidyr::unnest(cols = AF)
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
lapply(testfiles[1:5], quick_check)
lapply(testfiles[6:10], quick_check)
testfiles
lapply(testfiles[11:21], quick_check)
testfiles = vcffiles[c(190:210)]
testfiles
vcffiles = grep("SmallVariants", vcffiles, value = TRUE, invert = TRUE)
vcffiles
testfiles = vcffiles[c(190:210)]
testfiles
lapply(testfiles[1:11], quick_check)
lapply(testfiles[12:21], quick_check)
testfiles
vcffiles = grep("SolidTumor-Fusions", vcffiles, value = TRUE, invert = TRUE)
testfiles = vcffiles[c(190:210)]
testfiles
lapply(testfiles[12:21], quick_check)
testfiles[12:21]
quick_check(testfiles[20])
quick_check = function(vcfpath){
fu = readVCF(vcfpath)
if(nrow(fu)>0){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows = cnv_parse(cnv_rows)
}
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^1)
filtered = dplyr::select(vcf, 1:7, exon, AF, QUAL) |>
tidyr::unnest(cols = AF)
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
quick_check(testfiles[20])
quick_check = function(vcfpath){
fu = readVCF(vcfpath)
if(nrow(fu)>0){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows = cnv_parse(cnv_rows)
}
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^1)
filtered = dplyr::select(vcf, 1:7, exon, AF, QUAL, totalDepth) |>
tidyr::unnest(cols = AF)
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
quick_check(testfiles[20])
vcf_test[1]
readr::read_tsv(vcf_test[1])
readr::read_tsv(vcf_test[1], col_names = FALSE)
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
return(comment_section)
}
vcf_comment_section(testfiles[1])
vcf_comment_section(testfiles[1])
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
return(comment_section)
}
vcf_comment_section(testfiles[1])
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"))
return(comment_section)
}
vcf_comment_section(testfiles[1])
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[1])
panel_string = function(vcf_comments)
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\\\\"', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[1])
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[1])
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub("\\", '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[1])
glob2rx("\")
glob2rx("\\")
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub("\\\\", '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[1])
glob2rx('\"tvc 5')
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
#comment_section$X1 = gsub("\", '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), sep = "=")
return(comment_section)
}
glob2rx('\\"tvc 5')
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub("\\", '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[1])
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\"', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[1])
vcf_comment_section(testfiles[2])
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\"', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), fill = "right", sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[2])
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\"', '', comment_section$X1)
#comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), fill = "right", sep = "=")
return(comment_section)
}
vcf_comment_section(testfiles[2])
comment = vcf_comment_section(testfiles[2])
comment[17, ]
comment[17:19, ]
comment[47:51, ]
comment[c(17:21,47:51), ]
comment[c(1:2,17:21,47:51), ]
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\"', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), extra = "merge", sep = "=")
return(comment_section)
}
comment = vcf_comment_section(testfiles[2])
comment
comment[c(1:2,17:21,47:51), ]
testfiles
comment
testfiles
comment = vcf_comment_section(testfiles[12])
comment[c(1:2,17:21,47:51), ]
comment$parameter
comment[14,]
comment[8:15,]
comment = vcf_comment_section(testfiles[14])
comment[c(1:2,17:21,47:51), ]
comment = vcf_comment_section(testfiles[14])
comment[8:15,]
comment = vcf_comment_section(testfiles[11])
comment[8:15,]
comment = vcf_comment_section(testfiles[11])
comment[8:20,]
comment = vcf_comment_section(testfiles[12])
comment[8:20,]
comment = vcf_comment_section(testfiles[19])
comment[8:20,]
comment = vcf_comment_section(vcffiles[19])
comment[8:20,]
vcffiles
comment = vcf_comment_section(vcffiles[200])
comment[8:20,]
comment = vcf_comment_section(vcffiles[201])
comment[8:20,]
#' Extract commented section from VCF
#'
#' @param vcfpath
#'
#' @return
#' @export
#'
#' @examples
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\"', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), extra = "merge", sep = "=")
path_df = data.frame(parameter = "vcfpath",
value = vcfpath)
comment_section = dplyr::bind_rows(path_df, comment_section)
return(comment_section)
}
comment_section(vcffiles[1])
#' Extract commented section from VCF
#'
#' @param vcfpath
#'
#' @return
#' @export
#'
#' @examples
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\"', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), extra = "merge", sep = "=")
path_df = data.frame(parameter = "vcfpath",
value = vcfpath)
comment_section = dplyr::bind_rows(path_df, comment_section)
return(comment_section)
}
vcf_comment_section(vcffiles[1])
vcf_comment_section(vcffiles[1])
vcffiles
vcffiles[1]
vcf_comment_section(vcffiles[200])
#' Extract commented section from VCF
#'
#' @param vcfpath
#'
#' @return
#' @export
#'
#' @examples
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\"', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), extra = "merge", sep = "=")
path_df = data.frame(parameter = "path_vcf",
value = vcfpath)
comment_section = dplyr::bind_rows(path_df, comment_section)
return(comment_section)
}
vcf_comment_section(vcffiles[200])
#' Extract commented section from VCF
#'
#' @param vcfpath
#'
#' @return
#' @export
#'
#' @examples
vcf_comment_section = function(vcfpath){
comment_section = readr::read_tsv(vcfpath, col_names = FALSE)
comment_section = dplyr::filter(comment_section, grepl("##", X1))
comment_section$X1 = gsub("##", '', comment_section$X1)
comment_section$X1 = gsub('\\"', '', comment_section$X1)
comment_section = tidyr::separate(comment_section, col = X1, into = c("parameter", "value"), extra = "merge", sep = "=")
path_df = tibble::tibble(parameter = "path_vcf",
value = vcfpath)
comment_section = dplyr::bind_rows(path_df, comment_section)
return(comment_section)
}
vcf_comment_section(vcffiles[200])
quick_check = function(vcfpath){
fu = readVCF(vcfpath)
if(nrow(fu)>0){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows = cnv_parse(cnv_rows)
}
vcf = dplyr::filter(vcf, alt != "<CNV>")
#vcf = dplyr::filter(vcf, QUAL >= 10^1)
filtered = dplyr::select(vcf, 1:7, exon, AF, QUAL, totalDepth) |>
tidyr::unnest(cols = AF)
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
quick_check(testfiles[20])
readVCF(testfiles[[2]])
VariantAnnotation::readVcfAsVRanges(testfiles[[2]])
create_output_folder = function(path_vcf){
sampleName = unique(readVCF(path_vcf)$sampleNames)
return(sampleName)
}
lapply(testfiles, create_output_folder)
testfiles
lapply(testfiles[1:4], create_output_folder)
create_output_folder = function(path_vcf){
sampleName = as.character(unique(readVCF(path_vcf)$sampleNames))
return(sampleName)
}
lapply(testfiles[1:4], create_output_folder)
lapply(testfiles[1:10], create_output_folder)
create_output_folder = function(path_vcf){
sampleName = as.character(unique(readVCF(path_vcf)$sampleNames))
output_dirname = paste0(sampleName, '_watchdog_v2')
return(output_dirname)
}
lapply(testfiles[1:10], create_output_folder)
create_output_folder = function(path_vcf){
sampleName = as.character(unique(readVCF(path_vcf)$sampleNames))
output_dirname = paste0(sampleName, '_watchdog_v2')
dir.create(output_dirname)
return(output_dirname)
}
#' Uses VariantAnnotation package to read in VCF as GRanges object
#'
#' @param vcffilepath
#'
#' @return
#' @export
#'
#' @examples
readVCF = function(vcffilepath){
vavcf = VariantAnnotation::readVcfAsVRanges(vcffilepath)
vavcf = dplyr::filter(tibble::as_tibble(vavcf), AF !=0 | alt == "<CNV>")
vavcf$rowid = 1:nrow(vavcf)
return(vavcf)
}
create_output_folder = function(path_vcf){
sampleName = as.character(unique(readVCF(path_vcf)$sampleNames))
output_dirname = paste0(sampleName, '_watchdog_v2')
dir.create(output_dirname)
return(output_dirname)
}
lapply(testfiles[1:3], create_output_folder)
getwd*()
getwd()
create_output_folder = function(path_vcf){
output_dir = dirname(path_vcf)
sampleName = as.character(unique(readVCF(path_vcf)$sampleNames))
output_dirname = paste0(output_dir,"/", sampleName, '_watchdog_v2')
dir.create(output_dirname)
return(output_dirname)
}
lapply(testfiles[1:3], create_output_folder)
create_output_folder = function(path_vcf){
output_dir = dirname(path_vcf)
sampleName = as.character(unique(readVCF(path_vcf)$sampleNames))
output_dirname = paste0(output_dir,"/", sampleName, '_watchdog_v2')
if(!dir.exists(output_dirname)){
dir.create(output_dirname)
}
return(output_dirname)
}
lapply(testfiles[1:3], create_output_folder)
fu = readVCF(vcffiles[200])
fu
fu$FUNC
fu = readVCF(vcffiles[201])
fu$FUNC
typeof(fu$FUNC)
fu = readVCF(vcffiles[200ß])
fu$FUNC[1:4]
vcf = apply_FUNC_functions(fu)
vcf
fu
vcf$gene
fu$FUNC[496]
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
cnv_rows
vcffiles = list.files(path = "VCF", pattern = '*.vcf', recursive = TRUE, full.names = TRUE)
vcffiles = grep("/Variants/", vcffiles, value = TRUE, invert = TRUE)
vcffiles = grep("SmallVariants", vcffiles, value = TRUE, invert = TRUE)
vcffiles = grep("SolidTumor-Fusions", vcffiles, value = TRUE, invert = TRUE)
##### |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| NEW APPROACH USING VqriantAnnotation package
library(VariantAnnotation)
vcffiles = list.files(path = "VCF", pattern = '*.vcf', recursive = TRUE, full.names = TRUE)
vcffiles = grep("/Variants/", vcffiles, value = TRUE, invert = TRUE)
vcffiles = grep("SmallVariants", vcffiles, value = TRUE, invert = TRUE)
vcffiles = grep("SolidTumor-Fusions", vcffiles, value = TRUE, invert = TRUE)
##### |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| NEW APPROACH USING VqriantAnnotation package
library(VariantAnnotation)
unlist(vavcf[[1]]$FUNC)
testfiles = vcffiles[c(190:210)]
fu = VariantAnnotation::scanVcfHeader(vcf_test)
names(meta(fu))
fufu = apply_FUNC_functions(vcf_test)
#|#|#|#|#||#|#||#||#||#||#||#||#|#||#||##||#|#||#|#||#|#||#|#|#|#|##|#|#|#|#|#|#|#|#|#|#|
vavcf = VariantAnnotation::readVcfAsVRanges(vcf_test)
vcf_test = testfiles[3]
quick_check = function(vcfpath){
fu = readVCF(vcfpath)
if(nrow(fu)>0){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows = cnv_parse(cnv_rows)
}
vcf = dplyr::filter(vcf, alt != "<CNV>")
#vcf = dplyr::filter(vcf, QUAL >= 10^1)
filtered = dplyr::select(vcf, 1:7, exon, AF, QUAL, totalDepth) |>
tidyr::unnest(cols = AF)
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
quick_check(testfiles[20])
testfiles
quick_check(testfiles[1])
quick_check(testfiles[20])
quick_check(testfiles[19])
quick_check(testfiles[15])
quick_check(testfiles[13])
