#'
#' @return
#' @export
#'
#' @examples
extract_FUNC_funct = function(character_vector){
string_oi = grep("function:", character_vector, value = TRUE)
if(identical(string_oi,character(0))){
return(NA)
}else{
#string_oi = gsub("'","",string_oi)
string_oi = stringr::str_remove(string_oi, pattern = "function:")
return(string_oi)
}
}
#' Call all vcf FUNC extract functions
#'
#' @param character_vector
#'
#' @return
#' @export
#'
#' @examples
combine_FUNC_extracts = function(character_vector){
character_vector = clean_FUNC_character(character_vector)
gene = extract_FUNC_gene(character_vector)
transcript = extract_FUNC_transcript(character_vector)
coding = extract_FUNC_coding(character_vector)
protein = extract_FUNC_protein(character_vector)
location = extract_FUNC_location(character_vector)
exon = extract_FUNC_exon(character_vector)
origPos = extract_FUNC_origPos(character_vector)
funct = extract_FUNC_funct(character_vector)
res_df = data.frame(gene = gene,
transcript = transcript,
funct = funct,
coding = coding,
protein = protein,
location = location,
exon = exon,
origPos = origPos)
return(res_df)
}
fufu = apply_FUNC_functions(vcf_test)
fufu
fufu$funct
dplyr::filter(fufu, funct != 'synonymous')
fufu |>
dplyr::select(gene, coding, protein, AF, QUAL) |>
dplyr::filter(fufu, funct != 'synonymous') |>
tidyr::unnest(cols = "AF") |>
dplyr::filter(!grepl("=", protein) & QUAL > 10^3) |>
dplyr::arrange(gene)
fufu |>
dplyr::select(gene, coding, protein, AF, QUAL, funct) |>
dplyr::filter(fufu, funct != 'synonymous') |>
tidyr::unnest(cols = "AF") |>
dplyr::filter(!grepl("=", protein) & QUAL > 10^3) |>
dplyr::arrange(gene)
fufu |>
dplyr::select(gene, coding, protein, AF, QUAL, funct) |>
dplyr::filter(fufu, funct != 'synonymous')
fufu |>
dplyr::select(gene, coding, protein, AF, QUAL, funct) |>
dplyr::filter(funct != 'synonymous') |>
tidyr::unnest(cols = "AF") |>
dplyr::filter(!grepl("=", protein) & QUAL > 10^3) |>
dplyr::arrange(gene)
fufu
dplyr::filter(fufu, gene == "AR")
dplyr::filter(fufu, gene == "AR") |>
dplyr::pull(funct)
fu
table(fu$SVTYPE)
fu = tibble::as_tibble(fu)
table(fu$SVTYPE)
dplyr::filter(fu, SVTYPE == "CNV")
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL)
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL) |>
tidyr::unnest(cols = "AF")
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL) |>
tidyr::unnest(cols = "AF") |>
dplyr::pull(FUNCT)
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL) |>
tidyr::unnest(cols = "AF") |>
dplyr::pull(FUNC)
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC) |>
tidyr::unnest(cols = "AF") |>
dplyr::pull(FUNC)
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC) |>
tidyr::unnest(cols = "AF")
dplyr::filter(fu, SVTYPE == "CNV")
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI) |>
tidyr::unnest(cols = "AF")
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI) |>
tidyr::unnest(cols = c("AF", "CI"))
dplyr::filter(fu, SVTYPE == "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI) |>
tidyr::unnest(cols = c("AF", "CI")) |>
as.data.frame()
fu = VariantAnnotation::readVcfAsVRanges(vcf_test)
fu = tibble::as_tibble(fu)
dplyr::filter(fu, SVTYPE == "CNV")
dplyr::filter(fu, SVTYPE != "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ) |>
tidyr::unnest(cols = c("AF", "CI")) |>
as.data.frame()
dplyr::filter(fu, SVTYPE != "CNV") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ)
fu
dplyr::filter(fu, SVTYPE != "CNV")
dplyr::filter(fu, alt != "<CNV>")
fu
dplyr::filter(fu, alt != "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ)
dplyr::filter(fu, alt != "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ) |>
tidyr::unnest(cols = c("AF", "CI", "HOMLEN", "HOMSEQ")) |>
as.data.frame()
dplyr::filter(fu, alt != "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ)
dplyr::filter(fu, alt != "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ) |>
tidyr::unnest(cols = c("FUNC", "AF", "CI", "HOMLEN", "HOMSEQ")) |>
as.data.frame()
dplyr::filter(fu, alt != "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ) |>
tidyr::unnest(cols = "HOMLEN") |>
as.data.frame()
dplyr::filter(fu, alt != "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ) |>
as.data.frame()
dplyr::filter(fu, alt == "<CNV>")
dplyr::filter(fu, alt == "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ) |>
as.data.frame()
fu = VariantAnnotation::readVcfAsVRanges(vcf_test)
fu$CONFIDENCE
fu$CONFIDENCE[!is.na(fu$CONFIDENCE)]
fu$CI[!is.na(fu$CI)]
fu$CI
table(fu$CI)
table(unlist(fu$CI))
dplyr::filter(fu, alt == "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ) |>
as.data.frame()
fu = tibble::as_tibble(fu)
dplyr::filter(fu, alt == "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, HOMLEN, HOMSEQ) |>
as.data.frame()
dplyr::filter(fu, alt == "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, CONFIDENCE)
dplyr::filter(fu, alt == "<CNV>") |>
dplyr::select(1:4, NUMTILES, AF, QUAL, FUNC, CI, CONFIDENCE) |>
dplyr::pull(CI)
readVCF = function(vcffilepath){
vavcf = VariantAnnotation::readVcfAsVRanges(vcffilepath)
vavcf = dplyr::filter(tibble::as_tibble(vavcf), AF !=0)
vavcf$rowid = 1:nrow(vavcf)
return(vavcf)
}
#' Uses VariantAnnotation package to read in VCF as GRanges object
#'
#' @param vcffilepath
#'
#' @return
#' @export
#'
#' @examples
readVCF = function(vcffilepath){
vavcf = VariantAnnotation::readVcfAsVRanges(vcffilepath)
vavcf = dplyr::filter(tibble::as_tibble(vavcf), AF !=0)
vavcf$rowid = 1:nrow(vavcf)
return(vavcf)
}
dplyr::filter(fu, alt == "<CNV>")
readVCF(vcf_test)
fu = readVCF(vcf_test)
dplyr::filter(fu, alt == "<CNV>")
#' Uses VariantAnnotation package to read in VCF as GRanges object
#'
#' @param vcffilepath
#'
#' @return
#' @export
#'
#' @examples
readVCF = function(vcffilepath){
vavcf = VariantAnnotation::readVcfAsVRanges(vcffilepath)
vavcf = dplyr::filter(tibble::as_tibble(vavcf), AF !=0 | alt == "<CNV>")
vavcf$rowid = 1:nrow(vavcf)
return(vavcf)
}
fu = readVCF(vcf_test)
dplyr::filter(fu, alt == "<CNV>")
fu
apply_FUNC_functions(fu)
#' Apply functions to extract information from FUNC to vcf
#'
#' @param vcffilepath
#'
#' @return
#' @export
#'
#' @examples
apply_FUNC_functions = function(vavcf){
vavcf = dplyr::group_by(vavcf, rowid)
vavcf = dplyr::group_split(vavcf)
res_vcf = dplyr::bind_rows(lapply(vavcf,combine_orig_with_FUNC_extracts))
return(res_vcf)
}
apply_FUNC_functions(fu)
apply_FUNC_functions(fu) |>
dplyr::filter(alt == "<CNV>")
apply_FUNC_functions(fu) |>
dplyr::filter(alt == "<CNV>") |>
dplyr::select(CI)
apply_FUNC_functions(fu) |>
dplyr::filter(alt == "<CNV>") |>
dplyr::select(gene, ref, altCI)
cnv_test = apply_FUNC_functions(fu) |>
dplyr::filter(alt == "<CNV>") |>
dplyr::select(gene, ref, alt,CI)
cnv_test = apply_FUNC_functions(fu) |>
dplyr::filter(alt == "<CNV>")
cnv_test>
dplyr::select(gene, ref, alt,CI)
cnv_test |>
dplyr::select(gene, ref, alt,CI)
cnv_test |>
dplyr::select(gene, ref, alt,CI) |>
tidyr::unnest(CI)
cnv_test |>
dplyr::select(gene, ref, alt,CI) |>
tidyr::unnest(CI)
cnv_test |>
dplyr::select(gene, ref, alt,CI, CONFIDENCE) |>
tidyr::unnest(CI)
cnv_test |>
dplyr::select(gene, ref, alt,CI, CIEND) |>
tidyr::unnest(CI)
cnv_test |>
dplyr::select(gene, ref, alt,CI, CIEND) |>
tidyr::unnest(CI, CIEND)
cnv_test |>
dplyr::select(gene, ref, alt,CI, CIEND) |>
tidyr::unnest(c(CI, CIEND))
cnv_test |>
dplyr::select(gene, ref, alt,CI, CIEND) |>
tidyr::unnest(c(CI, CIEND)) |>
tidyr::separate(CI, into = c("Five", "NinetyFive"), sep = ":")
cnv_test |>
dplyr::select(gene, ref, alt,CI, CIEND) |>
tidyr::unnest(c(CI, CIEND)) |>
tidyr::separate(CI, into = c("percentile", "value"), sep = ":") |>
tidyr::pivot_wider(names_from = "percentile",
values_from = 'value')
cnv_test |>
dplyr::select(gene, ref, alt,CI, CIEND) |>
tidyr::unnest(c(CI, CIEND)) |>
tidyr::separate(CI, into = c("percentile", "value"), sep = ":") |>
tidyr::pivot_wider(names_from = "percentile",
values_from = 'value')
colnames(cnv_test)
cnv_test |>
dplyr::select(gene, ref, alt,CI, RAW_CN, PRECISION) |>
tidyr::unnest(c(CI, CIEND)) |>
tidyr::separate(CI, into = c("percentile", "value"), sep = ":") |>
tidyr::pivot_wider(names_from = "percentile",
values_from = 'value')
cnv_test |>
dplyr::select(gene, ref, alt,CI, RAW_CN, PRECISION) |>
tidyr::unnest(c(CI)) |>
tidyr::separate(CI, into = c("percentile", "value"), sep = ":") |>
tidyr::pivot_wider(names_from = "percentile",
values_from = 'value')
cnv_test
colnames(cnv_test)
cnv_test |>
dplyr::select(gene, ref, alt,CI, RAW_CN, PRECISION, DP, PRECISE) |>
tidyr::unnest(c(CI)) |>
tidyr::separate(CI, into = c("percentile", "value"), sep = ":") |>
tidyr::pivot_wider(names_from = "percentile",
values_from = 'value')
cnv_test |>
dplyr::select(gene, ref, alt,CI, RAW_CN, PRECISION, DP, PRECISE) |>
tidyr::unnest(c(CI, PRECISE)) |>
tidyr::separate(CI, into = c("percentile", "value"), sep = ":") |>
tidyr::pivot_wider(names_from = "percentile",
values_from = 'value')
#' Parse CNV rows
#'
#' @param cnv_rows
#'
#' @return
#' @export
#'
#' @examples
cnv_parse = function(cnv_rows){
cnv_rows =  cnv_rows %>%
dplyr::select(gene, ref, alt,CI, RAW_CN) %>%
tidyr::unnest(c(CI, PRECISE)) %>%
tidyr::separate(CI, into = c("percentile", "value"), sep = ":") %>%
tidyr::pivot_wider(names_from = "percentile",
values_from = 'value')
return(cnv_rows)
}
cnv_test
cnv_parse(cnv_test)
library(magrittr)
#' Parse CNV rows
#'
#' @param cnv_rows
#'
#' @return
#' @export
#'
#' @examples
cnv_parse = function(cnv_rows){
cnv_rows = dplyr::select(cnv_rows, gene, ref, alt,CI, RAW_CN)
cnv_rows = tidyr::unnest(cnv_rows, c(CI, PRECISE))
cnv_rows = tidyr::separate(cnv_rows, CI, into = c("percentile", "value"), sep = ":")
cnv_rows = tidyr::pivot_wider(cnv_rows, names_from = "percentile", values_from = 'value')
return(cnv_rows)
}
cnv_parse(cnv_test)
#' Parse CNV rows
#'
#' @param cnv_rows
#'
#' @return
#' @export
#'
#' @examples
cnv_parse = function(cnv_rows){
cnv_rows = dplyr::select(cnv_rows, gene, ref, alt,CI, RAW_CN)
cnv_rows = tidyr::unnest(cnv_rows, CI)
cnv_rows = tidyr::separate(cnv_rows, CI, into = c("percentile", "value"), sep = ":")
cnv_rows = tidyr::pivot_wider(cnv_rows, names_from = "percentile", values_from = 'value')
return(cnv_rows)
}
cnv_parse(cnv_test)
#' Parse CNV rows
#'
#' @param cnv_rows
#'
#' @return
#' @export
#'
#' @examples
cnv_parse = function(cnv_rows){
cnv_rows = dplyr::select(cnv_rows, gene, ref, alt,CI, RAW_CN)
cnv_rows = tidyr::unnest(cnv_rows, CI)
cnv_rows$CI = paste0('perc_',cnv_rows$CI)
cnv_rows = tidyr::separate(cnv_rows, CI, into = c("percentile", "value"), sep = ":")
cnv_rows = tidyr::pivot_wider(cnv_rows, names_from = "percentile", values_from = 'value')
return(cnv_rows)
}
cnv_parse(cnv_test)
#' Parse CNV rows
#'
#' @param cnv_rows
#'
#' @return
#' @export
#'
#' @examples
cnv_parse = function(cnv_rows){
cnv_rows = dplyr::select(cnv_rows, gene, origPos, ref, alt,CI, RAW_CN)
cnv_rows = tidyr::unnest(cnv_rows, CI)
cnv_rows$CI = paste0('perc_',cnv_rows$CI)
cnv_rows = tidyr::separate(cnv_rows, CI, into = c("percentile", "value"), sep = ":")
cnv_rows = tidyr::pivot_wider(cnv_rows, names_from = "percentile", values_from = 'value')
return(cnv_rows)
}
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
vcf = apply_FUNC_functions(fu)
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
cnv_rows
cnv_parse(cnv_rows)
vcf
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf
vcf$protein
dplyr::filter(vcf, protein == 'S904')
dplyr::filter(vcf, protein == 'p.S904')
vcf = dplyr::filter(funct != 'synonymous')
fu = readVCF(vcf_test)
vcf = dplyr::filter(vcf, funct != 'synonymous')
vcf = apply_FUNC_functions(fu)
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
vcf = dplyr::filter(vcf, alt != "<CNV>")
cnv_rows
vcf
vcf = dplyr::filter(vcf, QUAL >= 10^3)
fu = readVCF(vcf_test)
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^3)
vcf = apply_FUNC_functions(fu)
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf = apply_FUNC_functions(fu)
vcf = dplyr::filter(vcf, alt != "<CNV>")
fu = readVCF(vcf_test)
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^3)
vcf = apply_FUNC_functions(fu)
vcf = dplyr::filter(vcf, alt != "<CNV>")
fu = readVCF(vcf_test)
vcf = dplyr::filter(vcf, funct != 'synonymous')
vcf = apply_FUNC_functions(fu)
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^3)
vcf = dplyr::filter(vcf, alt != "<CNV>")
fu = readVCF(vcf_test)
vcf = dplyr::filter(vcf, funct != 'synonymous')
vcf = apply_FUNC_functions(fu)
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^3)
vcf
fu = readVCF(vcf_test)
vcf = dplyr::filter(fu, funct != 'synonymous')
fu = readVCF(vcf_test)
fu = readVCF(vcf_test)
vcf = apply_FUNC_functions(fu)
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
vcf = dplyr::filter(vcf, alt != "<CNV>")
vcf = dplyr::filter(vcf, QUAL >= 10^3)
vcf
vcf$gene
vcf$origPos
#|#|#|#|#||#|#||#||#||#||#||#||#|#||#||##||#|#||#|#||#|#||#|#|#|#|##|#|#|#|#|#|#|#|#|#|#|
fu = readVCF(vcf_test)
fu
fu[671,]
fu[671,]$FUNC
vavcf = VariantAnnotation::readVcfAsVRanges(vcf_test)
vavcf[671,]
vavcf[671,]$FUNC
start(vavcf) == 21968199
vavcf[start(vavcf) == 21968199,]
vavcf[start(vavcf) == 21968199,]$FUNC
vavcf[start(vavcf) == 21968199,]$FUNC[[1]]
grep("gene", vavcf[start(vavcf) == 21968199,]$FUNC[[1]], value = TRUE)
paste(vavcf[start(vavcf) == 21968199,]$FUNC[[1]], collapse = ',')
multi_entries = paste(vavcf[start(vavcf) == 21968199,]$FUNC[[1]], collapse = ',')
stringr::str_split(multi_entries, pattern = "\\},")
stringr::str_split(multi_entries, pattern = "\\},")[[1]]
unlist(stringr::str_split(multi_entries, pattern = "\\},"))
multi_entries = unlist(stringr::str_split(multi_entries, pattern = "\\},"))
multi_entries = paste(vavcf[start(vavcf) == 21968199,]$FUNC[[1]], collapse = ',')
multi_entries = gsub("'", '', multi_entries)
multi_entries
multi_entries = unlist(stringr::str_split(multi_entries, pattern = "\\},"))
multi_entries
multi_entries =
extract_FUNC_gene()
multi_entries =
extract_FUNC_gene
extract_FUNC_gene
multi_entries = lapply(multi_entries, function(x) unlist(stringr::str_split(x, pattern = ",")))
multi_entries
multi_entries = paste(vavcf[start(vavcf) == 21968199,]$FUNC[[1]], collapse = ',')
multi_entries = gsub("'", '', multi_entries)
multi_entries = unlist(stringr::str_split(multi_entries, pattern = "\\},"))
multi_entries = lapply(multi_entries, function(x) unlist(stringr::str_split(x, pattern = ",")))
multi_entries
lapply(multi_entries, function(x) extract_FUNC_gene(x))
vavcf
grep("CDKN2A-DT", vavcf$FUNC, value = TRUE)
grep("CDKN2A-DT", unlist(vavcf$FUNC), value = TRUE)
unlist(vavcf$FUNC)
grepl("CDKN2A-DT", vavcf$FUNC, value = TRUE)
grepl("CDKN2A-DT", vavcf$FUNC)
which(grepl("CDKN2A-DT", vavcf$FUNC))
which(unlist(grepl("CDKN2A-DT", vavcf$FUNC)))
unlist(grepl("CDKN2A-DT", vavcf$FUNC))
which(grepl("CDKN2A-DT", vavcf$FUNC))
vavcf[which(grepl("CDKN2A-DT", vavcf$FUNC))]
vavcf[which(grepl("CDKN2A-DT", vavcf$FUNC)),]
tb_test = tibble::as_tibble(vavcf)
grepl("CDKN2A-DT", tb_test$FUNC))
grepl("CDKN2A-DT", tb_test$FUNC)
grep("CDKN2A-DT", tb_test$FUNC, value = TRUE)
grepl("CDKN2A-DT", tb_test$FUNC)
which(grepl("CDKN2A-DT", tb_test$FUNC))
vavcf[2141,]
vavcf[2141,]$FUNC
vavcf[2141,]$FUNC[[1]]
multi_entries = paste(vavcf[start(vavcf) == 21968199,]$FUNC[[1]], collap§se = ',')
multi_entries = paste(vavcf[start(vavcf) == 21968199,]$FUNC[[1]], collap§se = ',')
vavcf[start(vavcf) == 21968199,]
multi_entries = paste(vavcf[start(vavcf) == 21968199,]$FUNC[[1]], collapse = ',')
multi_entries = gsub("'", '', multi_entries)
multi_entries = unlist(stringr::str_split(multi_entries, pattern = "\\},"))
multi_entries = lapply(multi_entries, function(x) unlist(stringr::str_split(x, pattern = ",")))
lapply(multi_entries, function(x) extract_FUNC_gene(x))
vavcf[start(vavcf) == 21968199,]$FUNC
unlist(vavcf[start(vavcf) == 21968199,]$FUNC)
grep("gene", vavcf[start(vavcf) == 21968199,]$FUNC[[1]], value = TRUE)
length(grep("gene", vavcf[start(vavcf) == 21968199,]$FUNC[[1]], value = TRUE))
