indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
return(data_row)
}
reformat_INFO(vcfinfo)
vcfinfo = vcfs[[93]][[2]]$INFO
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
return(data_row)
}
reformat_INFO(vcfinfo)
lapply(vcfs[[3]], function(x) x$INFO)
lapply(vcfs[[7]], function(x) x$INFO)
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
return(df_list)
}
reformat_INFO(vcfinfo)
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
data_reshaped = cbind(data$FUNC, data_row)
return(data_reshaped)
}
reformat_INFO(vcfinfo)
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
data_reshaped = cbind(df_list$FUNC, data_row)
return(data_reshaped)
}
reformat_INFO(vcfinfo)
dplyr::distinct(reformat_INFO(vcfinfo))
vcfs[[93]][[2]]$INFO
AF_based_index(df_list$dataf$AF)
vcfinfo = vcfs[[93]][[2]]$INFO
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(infostring, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
data_reshaped = cbind(df_list$FUNC, data_row)
return(data_reshaped)
}
dplyr::distinct(reformat_INFO(vcfinfo))
vcfs[[93]][[2]]$INFO
vcfinfo = vcfs[[93]][[2]]$INFO
data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
data_reshaped = cbind(df_list$FUNC, data_row)
data_reshaped
vcfinfo = vcfs[[93]][[2]]$INFO
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(infostring, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
data_reshaped = cbind(df_list$FUNC, data_row)
return(data_reshaped)
}
dplyr::distinct(reformat_INFO(vcfinfo))
vcfs[[93]][[21]]$INFO
vcfs[[93]]
vcfinfo = vcfs[[93]][[4]]$INFO
dplyr::distinct(reformat_INFO(vcfinfo))
vcfinfo = vcfs[[93]][[2]]$INFO
dplyr::distinct(reformat_INFO(vcfinfo))
devtools::document()
interpretation_table(parsed_vcf[[4]])
vcfs
parsed_vcf = lapply(vcfs, function(x) dplyr::bind_rows(lapply(x, combine_function_calls)))
parsed_vcf = lapply(vcfs[1:5], function(x) dplyr::bind_rows(lapply(x, combine_function_calls)))
write_output_tables(parsed_vcf[[4]], "test/testpath")
parsed_vcf[[4]]
parsed_vcf = parsed_vcf[which(unlist(lapply(parsed_vcf, function(x) nrow(x))) > 0)]
parsed_vcf = lapply(parsed_vcf, change_col_name)
write_output_tables(parsed_vcf[[4]], "test/testpath")
interpretation_table(parsed_vcf[[4]])
metric_table(parsed_vcf[[4]])
variant_table(parsed_vcf[[4]])
parsed_vcf = lapply(vcfs[90:95], function(x) dplyr::bind_rows(lapply(x, combine_function_calls)))
parsed_vcf = parsed_vcf[which(unlist(lapply(parsed_vcf, function(x) nrow(x))) > 0)]
parsed_vcf = lapply(parsed_vcf, change_col_name)
write_output_tables(parsed_vcf[[4]], "test/testpath")
interpretation_table(parsed_vcf[[4]])
metric_table(parsed_vcf[[4]])
variant_table(parsed_vcf[[4]])
combine_function_calls
index_all_cols(vcfs[[93]]$INFO)
index_all_cols(vcfs[[93]][1]$INFO)
reformat_INFO(vcfs[[93]][1]$INFO)
vcfs[[93]]
reformat_INFO(vcfs[[93]][[4]]$INFO)
#' Reformat Info
#'
#' @param infostring
#'
#' @return
#' @export
#'
#' @examples
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(infostring, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
data_reshaped = cbind(df_list$FUNC, data_row)
data_reshaped = dplyr::relocate(data_reshaped, gene, coding, protein, location, contains("Ref"), contains("Alt"))
return(data_reshaped)
}
reformat_INFO(vcfs[[93]][[4]]$INFO)
#' Reformat Info
#'
#' @param infostring
#'
#' @return
#' @export
#'
#' @examples
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(infostring, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
data_reshaped = cbind(df_list$FUNC, data_row)
data_reshaped = dplyr::relocate(data_reshaped, gene, coding, protein, location, contains("Ref"), contains("Alt"), contains("orig"), contains("normalized"))
return(data_reshaped)
}
reformat_INFO(vcfs[[93]][[4]]$INFO)
variant_table(parsed_vcf[[4]])
interpretation_table(parsed_vcf[[4]])
metric_table(parsed_vcf[[4]])
variant_table(parsed_vcf[[4]])
#' Output clean metric table starting from combined output from VCF parsing
#'
#' @param combined_output
#'
#' @return
#' @export
#'
#' @examples
metric_table = function(combined_output){
#output = dplyr::select(combined_output, rowid, gene, coding,protein, AF,QUA)
return(output)
}
metric_table(parsed_vcf[[4]])
source("~/USB/USB_Diagnostics/VCFparse/R/output_tables.R", echo=TRUE)
#' Output clean metric table starting from combined output from VCF parsing
#'
#' @param combined_output
#'
#' @return
#' @export
#'
#' @examples
metric_table = function(combined_output){
#output = dplyr::select(combined_output, rowid, gene, coding,protein, AF,QUA)
return(combined_output)
}
metric_table(parsed_vcf[[4]])
parsed_vcf[[4]]
variant_table(parsed_vcf[[1]])
reformat_INFO(vcfs[[93]][[2]]$INFO)
colnames(reformat_INFO(vcfs[[93]][[2]]$INFO))
reformatted = colnames(reformat_INFO(vcfs[[93]][[2]]$INFO))
parsed = colnames(parsed_vcf[[4]])
parsed
reformatted %in% parsed
reformatted = colnames(reformat_INFO(vcfs[[93]][[2]]$INFO))
parsed = colnames(parsed_vcf[[4]])
parsed %in% reformatted
parsed[parsed %in% reformatted]
parsed[!parsed %in% reformatted]
parsed[!parsed %in% reformatted]
reformatted = colnames(reformat_INFO(vcfs[[1]][[1]]$INFO))
reformat_INFO(vcfs[[1]][[1]]$INFO
reformat_INFO(vcfs[[1]][[1]]$INFO)
vcfs[[1]][[1]]$INFO
reformat_INFO(vcfs[[1]][[1]]$INFO)
parsed_vcf[[4]]
colnames(parsed_vcf[[4]])
collect_TYPES = function(infostring){
svtype = stringr::str_extract_all(infostring, pattern = "TYPE=.*?;|SVTYPE=.*?;")
return(svtype)
}
collect_AF = function(infostring){
svtype = stringr::str_extract(infostring, pattern = "^AF=.*?;")
if(!is.na(svtype)){
if(grepl(',', svtype)){
return(svtype)
}
}
}
extract_AF_values = function(afstring){
pack = paste0('pack_', rnorm(1, sd = 5), dnorm(1, sd = 5), runif(1, min = -10, max = 10 ))
afstring = gsub('AF=|;','', afstring)
afstring = stringr::str_split(afstring, pattern = ',')[[1]]
afv = unlist(lapply(afstring, as.numeric))
vals = list(df =  data.frame(pack = pack, values = afv),
distances = as.numeric(dist(afv)))
return(vals)
}
extract_AF_quantiles = function(afvalues){
if(!all(afvalues == 0)){
qval = quantile(afvalues)
return(qval)
}
}
#' Reformat Info
#'
#' @param infostring
#'
#' @return
#' @export
#'
#' @examples
reformat_INFO = function(infostring){
df = data.frame(entries = unlist(stringr::str_split(infostring, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
indeces = AF_based_index(df_list$dataf$AF)
data_row = dplyr::bind_rows(lapply(indeces, function(x) index_all_cols(df_list$dataf, index_pos = x)))
data_reshaped = cbind(df_list$FUNC, data_row)
data_reshaped = dplyr::relocate(data_reshaped, gene, coding, protein, location, contains("Ref"),
contains("Alt"), contains("orig"), contains("normalized"))
return(data_reshaped)
}
collect_TYPES = function(infostring){
svtype = stringr::str_extract_all(infostring, pattern = "TYPE=.*?;|SVTYPE=.*?;")
return(svtype)
}
type_collection = lapply(vcf, function(x) collect_TYPES(x$INFO))
all_em_types = unlist(lapply(vcfs, function(x) lapply(x, function(z) collect_TYPES(z$INFO))))
all_em_types
table(all_em_types)
all_em_infos = unlist(lapply(vcfs, function(x) lapply(x, function(z) collect_AF(z$INFO))))
all_em_infos
extract_AF_quantiles(all_em_infos[[1]])
extract_AF_quantiles(all_em_infos[[2]])
extract_AF_quantiles(all_em_infos[2])
extract_AF_quantiles(all_em_infos[1:10])
all_em_infos[1:10]
extract_AF_quantiles
extract_AF_quantiles(all_em_infos[[1]])
all_qs = (lapply(all_em_values, function(x) extract_AF_quantiles(x$df$values)))
all_qs
is.null(all_qs)
lapply(all_qs, is.null)
!lapply(all_qs, is.null)
!unlist(lapply(all_qs, is.null))
all_qs[!unlist(lapply(all_qs, is.null))]
qqs = all_qs[!unlist(lapply(all_qs, is.null))]
qqs
dplyr::bind_rows(qqs)
dplyr::bind_rows(qqs) |> ggplot(aes(`50%`, `100%`)) + geom_point()
dplyr::bind_rows(qqs) |> ggplot(aes(`0%`, `100%`)) + geom_point()
dplyr::bind_rows(qqs) |> ggplot(aes(`50%`, `100%`)) + geom_point()
vcfs[90:95]
vcfs[92]
vcfs[93]
interpretation_table(parsed_vcf[[4]])
parsed_vcf[[4]]
parsed_vcf[[4]])
metric_table(parsed_vcf[[4]])
interpretation_table(parsed_vcf[[4]])
interp = interpretation_table(parsed_vcf[[4]])
met_tab = metric_table(parsed_vcf[[4]])
var_tab = variant_table(parsed_vcf[[4]])
interp = interpretation_table(parsed_vcf[[4]])
interp = interpretation_table(parsed_vcf[[4]])
met_tab = metric_table(parsed_vcf[[4]])
var_tab = variant_table(parsed_vcf[[4]])
interpretation_table(parsed_vcf[[4]])
metric_table(parsed_vcf[[4]])
variant_table(parsed_vcf[[4]])
reformatted = colnames(reformat_INFO(vcfs[[4]][[2]]$INFO))
reformatted
reformat_INFO(vcfs[[4]][[2]]$INFO)
reformat_INFO(vcfs[[93]][[2]]$INFO)
reformat = reformat_INFO(vcfs[[93]][[2]]$INFO)
lapply(vcfs[[93]], function(x) reformat_INFO(x$INFO))
dplyr::bind_rows(lapply(vcfs[[93]], function(x) reformat_INFO(x$INFO)))
interp = interpretation_table(parsed_vcf[[4]])
met_tab = metric_table(parsed_vcf[[4]])
var_tab = variant_table(parsed_vcf[[4]])
reformat = dplyr::bind_rows(lapply(vcfs[[93]], function(x) reformat_INFO(x$INFO)))
excel_file = list(var_tab,interp, met_tab , reformat)
interp = interpretation_table(parsed_vcf[[4]])
met_tab = metric_table(parsed_vcf[[4]])
var_tab = variant_table(parsed_vcf[[4]])
reformat = dplyr::bind_rows(lapply(vcfs[[93]], function(x) reformat_INFO(x$INFO)))
excel_file = list(var_tab,interp, met_tab , reformat)
names(excel_file) <- c("Variants", "Metadata", "Interpretation", "Metrics")
writexl::write_xlsx(excel_file, path = "Y341_example_output.xlsx")
excel_file = list(var_tab, met_tab, interp, reformat)
names(excel_file) <- c("Variants", "Metadata", "Interpretation", "Metrics")
writexl::write_xlsx(excel_file, path = "Y341_example_output.xlsx")
vcf[[4]]
vcfs[[4]]
vcfs[[4]]$FORMAT
vcfs[[4]][[1]]3$FORMAT
vcfs[[4]][[1]]$FORMAT
vcfs[[4]][[3]]$FORMAT
vcfs[[93]][[3]]$FORMAT
vcfs[[93]][[2]]$FORMAT
vcfs[[93]][[2]]$Y341_1_B2023.5338
metric_table
parsed_vcf[[4]]
vcfs[[1]]
vcfs[[1]][1]
vcfs[[1]][1]$INFO
vcfs[[1]][[1]]$INFO
vcfs[[93]][[1]]$INFO
vcfs[[93]][[1]]$INFO
vcfs[[93]][[1]]$INFO
vcfs[[93]][[1]]$INFO
teststrings = c("AF=0;", "AF=0,0,0;", "AF=0,0,1;","AF=0,0,0,0,0,0,0.9;" )
AF_based_index(teststrings[1])
AF_based_index(teststrings[3])
teststrings = c("0", "0,0,0", "0,0,1","0,0,0,0,0,0,0.9" )
AF_based_index(teststrings[3])
AF_based_index(teststrings[0])
AF_based_index(teststrings[1])
AF_based_index(teststrings[4])
AF_based_index(teststrings[1])
AF_based_index(teststrings[1])
#' Title
#'
#' @param AF_char_string
#'
#' @return
#' @export
#'
#' @examples
AF_based_index = function(AF_char_string){
split_string = as.numeric(stringr::str_split_1(AF_char_string, pattern = ','))
vec_index = which(split_string != 0)
if( identical(vec_index, integer(0))){
return(NA)
}
return(vec_index)
}
devtools::document()
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_zero = all(af_vec == "0")
return(equal_zero)
}
check_non_zero_AF(teststrings[1])
teststrings[1]
all(teststrings[1] == "0")
all(teststrings[1] == "0")
all(teststrings[1] == "0")
teststrings = paste0("AF", teststrings)
teststrings
teststrings = gsub("AF", "AF=", teststrings)
teststrings
teststrings = paste0(teststrings, ";")
teststrings
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_nonzero = all(af_vec != "0")
return(equal_nonzero)
}
check_non_zero_AF(teststrings[1])
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
afstring = gsub("AF=|;", afstring)
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_nonzero = all(af_vec != "0")
return(equal_nonzero)
}
check_non_zero_AF(teststrings[1])
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
afstring = gsub("AF=|;", afstring)
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_nonzero = all(af_vec != "0")
return(afstring)
}
check_non_zero_AF(teststrings[1])
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
afstring = gsub("AF=|;",'', afstring)
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_nonzero = all(af_vec != "0")
return(afstring)
}
check_non_zero_AF(teststrings[1])
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
afstring = gsub("AF=|;",'', afstring)
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_nonzero = all(af_vec != "0")
return(equal_nonzero)
}
check_non_zero_AF(teststrings[1])
lapply(teststrings, check_non_zero_AF)
all(teststrings[1] == "0")
teststrings[1]
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
afstring = gsub("AF=|;",'', afstring)
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_nonzero = all(af_vec != "0")
return(equal_nonzero)
}
lapply(teststrings, check_non_zero_AF)
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
afstring = gsub("AF=|;",'', afstring)
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_nonzero = !all(af_vec == "0")
return(equal_nonzero)
}
lapply(teststrings, check_non_zero_AF)
check_non_zero_AF('AF=0')
check_non_zero_AF('AF=0;')
check_non_zero_AF('SV')
stringr::str_extract('SV', pattern = "^AF.*?;")
#' Check AF entries in vcf INFO entries
#'
#' @param vcfinfo
#'
#' @return
#' @export
#'
#' @examples
check_non_zero_AF = function(vcfinfo){
# return true if AF is not only 0 entries
afstring = stringr::str_extract(vcfinfo, pattern = "^AF.*?;")
if(is.na(afstring)){
return(TRUE)
}
afstring = gsub("AF=|;",'', afstring)
af_vec = stringr::str_split_1(afstring, pattern = ',')
equal_nonzero = !all(af_vec == "0")
return(equal_nonzero)
}
check_non_zero_AF('SV')
