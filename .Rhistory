#' ###### Change three to one letter code
#'
#' @param amino_acid_change_entry
#'
#' @return
#' @export
#'
#' @examples
amino_acid_conversion_three_to_one <- function(amino_acid_change_entry){
amino_acid_change_parse = amino_acid_change_entry
if(!is.na(amino_acid_change_entry) & !grepl("p\\.\\?", amino_acid_change_entry) ){
for(i in seq_along(aminocode)){
amino_acid_change_parse <- gsub(aminocode[i], names(aminocode)[i], amino_acid_change_parse, ignore.case = FALSE)
}
if(!grepl("p.", amino_acid_change_parse)){
amino_acid_change_parse <- paste0("p.", amino_acid_change_parse)
}
return(amino_acid_change_parse)
}else{
return(amino_acid_change_entry)
}
}
sapply(interprets[[i]]$protein, amino_acid_conversion_three_to_one)
parsed_vcf[[1]]
parsed_vcf[[4]]
write_output_tables(parsed_vcf[[4]], "testpath")
#' Creates output tables and directory by individual function calls
#'
#' @param combined_output
#' @param filepath
#'
#' @return
#' @export
#'
#' @examples
write_output_tables = function(combined_output, filepath){
## Create output dir first
dirpath = dirname(filepath)
dirpath = paste0(dirpath, '/watchdog_v2_output')
dir.create(dirpath)
## write out parsed tables
readr::write_tsv(interpretation_table(combined_output), file = "interpretation_table.tsv")
readr::write_tsv(metric_table(combined_output), file = "variant_metrics_table.tsv")
readr::write_tsv(variant_table(combined_output), file = "simplified_variant_table.tsv")
}
write_output_tables(parsed_vcf[[4]], "test/testpath")
interpretation_table(parsed_vcf[[4]])
interpretation_table(parsed_vcf[[4]])
metric_table(parsed_vcf[[4]])
parsed_vcf[[4]]
parsed_vcf[[4]]$protein
variant_table(parsed_vcf[[4]])
vcfs[[4]]$INFO
vcfs[[4]]
vcfs[[4]][[1]]$INFO
vcfinfo = vcfs[[4]][[1]]$INFO
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list
tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$dataf
variant_table(parsed_vcf[[4]])
interpretation_table(parsed_vcf[[4]])
vcfinfo
df_list$dataf
c( 0.0,0.0,0.0,0.0,0.463415,0.0,0.0,0.0)
commatas = c( 0.0,0.0,0.0,0.0,0.463415,0.0,0.0,0.0)
commatas = c('0.0,0.0,0.0,0.0,0.463415,0.0,0.0,0.0')
stringr::str_split_1(commatas, pattern = ',')
split_string = stringr::str_split_1(commatas, pattern = ',')
split_string
split_string = as.numeric(stringr::str_split_1(commatas, pattern = ','))
split_string
which(split_string != 0)
AF_based_index = function(AF_char_vector){
split_string = as.numeric(stringr::str_split_1(AF_char_vector, pattern = ','))
vec_index = which(split_string != 0)
return(vec_index)
}
df_list$dataf
vcfinfo
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
df_list
df_list$dataf$AF
AF_based_index(df_list$dataf$AF)
AF_based_index(df_list$dataf$AF)
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
return_filtered_vectors = function(char_string, vector_indeces){
split_string = as.numeric(stringr::str_split_1(AF_char_string, pattern = ','))
split_string = split_string[vector_indeces]
return(split_string)
}
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
return_filtered_vectors = function(char_string, vector_indeces){
split_string = as.numeric(stringr::str_split_1(char_string, pattern = ','))
split_string = split_string[vector_indeces]
return(split_string)
}
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
df_list$dataf$AO
df_list$dataf
stringr::str_split_1("cool", pattern = ',')
stringr::str_split_1("cool,", pattern = ',')
return_filtered_vectors = function(char_string, vector_indeces){
split_string = stringr::str_split_1(char_string, pattern = ',')
if(length(split_string) > 1){
split_string = split_string[vector_indeces]
}
return(split_string)
}
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
dplyr::mutate_all(df_list$dataf, return_filtered_vectors(.,AF_based_index(df_list$dataf$AF)))
dplyr::mutate_all(df_list$dataf, return_filtered_vectors(AF_based_index(df_list$dataf$AF)))
dplyr::mutate_all(df_list$dataf, return_filtered_vectors(.cols, AF_based_index(df_list$dataf$AF)))
dplyr::mutate(df_list$dataf, across(.cols = all), return_filtered_vectors(.cols, AF_based_index(df_list$dataf$AF)))
df_list$dataf
cols= colnames(df_list$dataf)
cols
dplyr::mutate(df_list$dataf, across(.cols = cols), return_filtered_vectors(.cols, AF_based_index(df_list$dataf$AF)))
dplyr::mutate(df_list$dataf, across(all_of(cols)), return_filtered_vectors(.cols, AF_based_index(df_list$dataf$AF)))
dplyr::mutate(df_list$dataf, across(all_of(cols)), return_filtered_vectors(AF_based_index(df_list$dataf$AF)))
dplyr::mutate(df_list$dataf, across(all_of(cols)), return_filtered_vectors(char_string = ., AF_based_index(df_list$dataf$AF)))
dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
df_list$dataf
return_filtered_vectors = function(char_string, vector_indeces){
if(!is.na(char_string)){
split_string = stringr::str_split_1(char_string, pattern = ',')
if(length(split_string) > 1){
split_string = split_string[vector_indeces]
}
return(split_string)
}
}
dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
tidyr::pivot_longer(res, -MYV)
vcffiles[1:5]
tidyr::pivot_longer(res, -MYV) |> as.data.frame()
vcffiles[1:5]
vcfs[[4]][[1]]$INFO
AF_based_index = function(AF_char_string){
split_string = as.numeric(stringr::str_split_1(AF_char_string, pattern = ','))
vec_index = which(split_string != 0)
return(vec_index)
}
AF_based_index(df_list$dataf$AF)
return_filtered_vectors = function(char_string, vector_indeces){
if(!is.na(char_string)){
split_string = stringr::str_split_1(char_string, pattern = ',')
if(length(split_string) > 1){
split_string = split_string[vector_indeces]
}
return(split_string)
}
}
vcfs[[6]][[1]]$INFO
vcfs
vcfinfo = vcfs[[3]][[1]]$INFO
vcfinfo
vcfinfo = vcfs[[2]][[1]]$INFO
i = 1
vcfs[[i]]
i = 1
lapply(vcfs[[i]], function(x) x$INFO)
collect_SVtypes(vcfs[[2]][[1]]$INFO)
collect_SVtypes = function(infostring){
svtype = stringr::str_extract(infostring, pattern = "SVTYPE=.*?;")
return(svtype)
}
collect_SVtypes(vcfs[[2]][[1]]$INFO)
collect_SVtypes(vcfs[[4]][[1]]$INFO)
collect_SVtypes = function(infostring){
svtype = stringr::str_extract_all(infostring, pattern = "SVTYPE=.*?;")
return(svtype)
}
collect_SVtypes(vcfs[[4]][[1]]$INFO)
vcfs[[4]][[1]]$INFO)
vcfs[[4]][[1]]$INFO
collect_SVtypes = function(infostring){
svtype = stringr::str_extract_all(infostring, pattern = "TYPE=.*?;")
return(svtype)
}
collect_SVtypes(vcfs[[4]][[1]]$INFO)
collect_TYPES = function(infostring){
svtype = stringr::str_extract_all(infostring, pattern = "TYPE=.*?;")
return(svtype)
}
all_em_types = lapply(vcfs, function(x) lapply(x, function(z) collect_TYPES(z$INFO)))
all_em_types
unlist(all_em_types)
vcffiles = list.files(path = "VCF", pattern = '*.vcf', recursive = TRUE, full.names = TRUE)
vcfs = lapply(vcffiles[1:100], read_vcf)
if(nrow(vcf)){
vcf$rowid = 1:nrow(vcf)
vcf = dplyr::group_by(vcf, rowid)
vcf = dplyr::group_split(vcf)
return(vcf)
}
#' Read VCF file skipping ## commented entries.
#' Also skips entries with 'AF=0;' as these are likely only derived by hotspot annotation and not by variant calling.
#'
#' @param vcf_filepath
#'
#' @return
#' @export
#'
#' @examples
read_vcf = function(vcf_filepath){
vcf = readr::read_tsv(vcf_filepath, comment = "##")
vcf = dplyr::filter(vcf,!grepl('AF=0;', INFO) & FILTER != 'FAIL')
if(nrow(vcf)){
vcf$rowid = 1:nrow(vcf)
vcf = dplyr::group_by(vcf, rowid)
vcf = dplyr::group_split(vcf)
return(vcf)
}
}
vcfs = lapply(vcffiles[1:100], read_vcf)
parsed_vcf = lapply(vcfs, function(x) dplyr::bind_rows(lapply(x, combine_function_calls)))
all_em_types = unlist(lapply(vcfs, function(x) lapply(x, function(z) collect_TYPES(z$INFO))))
all_em_types
table(all_em_types)
collect_TYPES = function(infostring){
svtype = stringr::str_extract_all(infostring, pattern = "TYPE=.*?;|SVTYPE=.*?;")
return(svtype)
}
all_em_types = unlist(lapply(vcfs, function(x) lapply(x, function(z) collect_TYPES(z$INFO))))
table(all_em_types)
AF_based_index(df_list$dataf$AF)
vcfs[[2]][[1]]$INFO
vcfinfo = vcfs[[6]][[1]]$INFO
vcfinfo
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
df_list
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
vcfinfo = vcfs[[4]][[1]]$INFO
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
commatas = c('0.0,0.0,0.0,0.0,0.463415,0.0,0.0,0.0')
vcfinfo = vcfs[[4]][[1]]$INFO
AF_based_index = function(AF_char_string){
split_string = as.numeric(stringr::str_split_1(AF_char_string, pattern = ','))
vec_index = which(split_string != 0)
return(vec_index)
}
AF_based_index(df_list$dataf$AF)
return_filtered_vectors = function(char_string, vector_indeces){
if(!is.na(char_string)){
split_string = stringr::str_split_1(char_string, pattern = ',')
if(length(split_string) > 1){
split_string = split_string[vector_indeces]
}
return(split_string)
}
}
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
stringr::str_split_1("cool,", pattern = ',')
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
tidyr::pivot_longer(res, -MYV) |> as.data.frame()
cols= colnames(df_list$dataf)
tidyr::pivot_longer(res, -MYV) |> as.data.frame()
vcfs
collect_SVtypes(vcfs[[32]][[1]]$INFO)
vcfinfo = vcfs[[32]][[1]]$INFO
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
commatas = c('0.0,0.0,0.0,0.0,0.463415,0.0,0.0,0.0')
vcfinfo = vcfs[[4]][[1]]$INFO
AF_based_index = function(AF_char_string){
split_string = as.numeric(stringr::str_split_1(AF_char_string, pattern = ','))
vec_index = which(split_string != 0)
return(vec_index)
}
AF_based_index(df_list$dataf$AF)
return_filtered_vectors = function(char_string, vector_indeces){
if(!is.na(char_string)){
split_string = stringr::str_split_1(char_string, pattern = ',')
if(length(split_string) > 1){
split_string = split_string[vector_indeces]
}
return(split_string)
}
}
df_list
df_list$dataf
df_list$dataf$AF
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
return_filtered_vectors = function(char_string, vector_indeces){
if(!is.na(char_string)){
split_string = stringr::str_split_1(char_string, pattern = ',')
if(length(split_string) > 1){
split_string = split_string[vector_indeces]
}
return(split_string)
}
}
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
stringr::str_split_1("cool,", pattern = ',')
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
cols= colnames(df_list$dataf)
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
tidyr::pivot_longer(res, -MYV) |> as.data.frame()
res
res$rowid = 1:nrow(res)
res$extra_col = 'extra'
tidyr::pivot_longer(res, -extra_col) |> as.data.frame()
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
res$extra_col = 'extra'
tidyr::pivot_longer(res, -extra_col) |> as.data.frame()
res$pivot_col = 'pivot'
tidyr::pivot_longer(res, -1) |> as.data.frame()
tidyr::pivot_longer(res, -pivot_col) |> as.data.frame()
source("~/USB/USB_Diagnostics/VCFparse/R/AF_based_filtering.R", echo=TRUE)
source("~/USB/USB_Diagnostics/VCFparse/R/AF_based_filtering.R", echo=TRUE)
devtools::document()
getwd()
devtools::document()
all_em_infos = unlist(lapply(vcfs, function(x) lapply(x, function(z) z$INFO)))
all_em_infos
all_em_infos = (lapply(vcfs, function(x) lapply(x, function(z) z$INFO)))
all_em_infos
collect_AF = function(infostring){
svtype = stringr::str_extract_all(infostring, pattern = "AF=.*?;")
return(svtype)
}
all_em_infos = (lapply(vcfs, function(x) lapply(x, function(z) collect_AFz$INFO))))
all_em_infos = (lapply(vcfs, function(x) lapply(x, function(z) collect_AFz$INFO)))
all_em_infos = (lapply(vcfs, function(x) lapply(x, function(z) collect_AF(z$INFO))))
all_em_infos
collect_AF = function(infostring){
svtype = stringr::str_extract_all(infostring, pattern = "^AF=.*?;")
return(svtype)
}
all_em_infos = (lapply(vcfs, function(x) lapply(x, function(z) collect_AF(z$INFO))))
all_em_infos
vcfinfo = vcfs[[91]][[3]]$INFO
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
df_list
AF_based_index(df_list$dataf$AF)
df_list
df_list$dataf$AF
all_em_infos
vcfinfo = vcfs[[91]][[2]]$INFO
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
AF_based_index(df_list$dataf$AF)
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
tidyr::pivot_longer(res, -pivot_col) |> as.data.frame()
#' Index all column entries
#'
#' @param datadf
#'
#' @return
#' @export
#'
#' @examples
index_all_cols = function(datadf){
cols= colnames(df_list$dataf)
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
}
#' Title
#'
#' @param char_string
#' @param vector_indeces
#'
#' @return
#' @export
#'
#' @examples
return_filtered_vectors = function(char_string, vector_indeces){
if(!is.na(char_string)){
split_string = stringr::str_split_1(char_string, pattern = ',')
if(length(split_string) > 1){
split_string = split_string[vector_indeces]
}
return(split_string)
}
}
#' Title
#'
#' @param AF_char_string
#'
#' @return
#' @export
#'
#' @examples
AF_based_index = function(AF_char_string){
split_string = as.numeric(stringr::str_split_1(AF_char_string, pattern = ','))
vec_index = which(split_string != 0)
return(vec_index)
}
index_all_cols(df_list$dataf)
#' Index all column entries
#'
#' @param datadf
#'
#' @return
#' @export
#'
#' @examples
index_all_cols = function(datadf){
cols= colnames(df_list$dataf)
res = dplyr::mutate(df_list$dataf, across(all_of(cols),
function(x) return_filtered_vectors(char_string = x,
AF_based_index(df_list$dataf$AF))))
return(res)
}
index_all_cols(df_list$dataf)
vcfs[[91]][[2]]$INFO
vcfs[[92]][[2]]$INFO
vcfs[[93]][[2]]$INFO
vcfinfo = vcfs[[93]][[2]]$INFO
df = data.frame(entries = unlist(stringr::str_split(vcfinfo, pattern = ";")))
df$entries = gsub("'",'', df$entries)
df_list = list(dataf = data.frame(entries =df[-grep("FUNC=", df$entries),]),
FUNC = df[grep("FUNC=", df$entries),])
df_list$dataf = tidyr::separate(df_list$dataf, col = 'entries', into = c("parameter","value"), sep = "=")
df_list$dataf = tidyr::pivot_wider(df_list$dataf, names_from = parameter, values_from = value)
df_list$FUNC = convert_entries_to_table(df_list$FUNC)
AF_based_index(df_list$dataf$AF)
return_filtered_vectors(df_list$dataf$AO,AF_based_index(df_list$dataf$AF))
index_all_cols(df_list$dataf)
collect_AF = function(infostring){
svtype = stringr::str_extract(infostring, pattern = "^AF=.*?;")
return(svtype)
}
stringr::str_extract(vcfinfo, pattern = "^AF=.*?;")
stringr::str_extract('vcfinfo', pattern = "^AF=.*?;")
collect_AF = function(infostring){
svtype = stringr::str_extract(infostring, pattern = "^AF=.*?;")
if(!is.na(svtype)){
if(grepl(',', svtype)){
return(svtype)
}
}
}
stringr::str_extract('vcfinfo', pattern = "^AF=.*?;")
collect_AF = function(infostring){
svtype = stringr::str_extract(infostring, pattern = "^AF=.*?;")
if(!is.na(svtype)){
if(grepl(',', svtype)){
return(svtype)
}
}
}
collect_AF('vcfinfo')
all_em_infos = (lapply(vcfs, function(x) lapply(x, function(z) collect_AF(z$INFO))))
all_em_infos
lapply(all_em_infos, is.null)
all_em_infos[[100]]
all_em_infos = unlist(lapply(vcfs, function(x) lapply(x, function(z) collect_AF(z$INFO))))
all_em_infos
