minsplit = 1,
minbucket = 1
)
rattle::fancyRpartPlot(mytree, caption = NULL)
fil_mat
fil_mat |>
dplyr::filter(allele_frequency > 0.027)
fil_mat |>
dplyr::filter(allele_frequency < 0.027)
fil_mat
royal_mat = readRDS("genexus_call.RDS")
dplyr::filter(royal_mat, allele_frequency < 0.01)
royal = dplyr::select(royal_mat, call:alt_allele_read_counts)
library(rpart)
library(rpart.plot)
royal$call = ifelse(grepl("PRESENT",royal$call), "PRESENT", royal$call)
fil_mat
royal
fil_mat = dplyr::filter(royal, call == "NO CALL" | grepl("PRESENT", call)) |>
dplyr::filter(allele_frequency > 0)
fil_mat
tidyr::pivot_longer(-call)
tidyr::pivot_longer(fil_mat,-call)
tidyr::pivot_longer(fil_mat,-call) |>
dplyr::group_by(name)
tidyr::pivot_longer(fil_mat,-call) |>
dplyr::group_by(name) |>
rstatix::wilcox_test(call~value)
rstatix::wilcox_test(value~call
)
tidyr::pivot_longer(fil_mat,-call) |>
dplyr::group_by(name) |>
rstatix::wilcox_test(value~call)
tidyr::pivot_longer(fil_mat,-call) |>
dplyr::group_by(name) |>
ggplot(aes(call, value)) +
facet_wrap(~name) + geom_boxplot()
####### STATISTICAL TESTS
library(tidyverse)
tidyr::pivot_longer(fil_mat,-call) |>
dplyr::group_by(name) |>
ggplot(aes(call, value)) +
facet_wrap(~name) + geom_boxplot()
tidyr::pivot_longer(fil_mat,-call) |>
dplyr::group_by(name) |>
ggplot(aes(call, value)) +
facet_wrap(~name, scales = 'free_y') + geom_boxplot()
View(fil_mat)
tidyr::pivot_longer(fil_mat,-call) |>
dplyr::group_by(name) |>
ggplot(aes(call, value)) +
facet_wrap(~name, scales = 'free_y') + geom_boxplot() + scale_y_log10()
fil_mat$call = as.factor(fil_mat$call )
fil_mat
svm_model = svm(call~., data = fil_mat, kernel = 'linear')
library(e1071)
svm_model = svm(call~., data = fil_mat, kernel = 'linear')
svm_model
svm_pred = predict(svm_model, fil_mat[,-c(1)])
svm_pred
conf_matri = table(fil_mat$call,svm_pred )
fil_mat$call
svm_pred
table(fil_mat$call,svm_pred )
fil_mat.na = na.omit(fil_mat)
fil_mat.na = na.omit(fil_mat)
fil_mat.na$call = as.factor(fil_mat.na$call )
library(e1071)
svm_model = svm(call~., data = fil_mat.na, kernel = 'linear')
svm_pred = predict(svm_model, fil_mat.na[,-c(1)])
conf_matri = table(fil_mat.na$call,svm_pred )
conf_matri
performance_metrics = function(confusion_matrix){
accuracy = sum(diag(confusion_matrix))/sum(confusion_matrix)
tpr =  confusion_matrix[2,2]/ (confusion_matrix[2,1] + confusion_matrix[2,2])
tnr = confusion_matrix[1,1]/ (confusion_matrix[1,1] + confusion_matrix[1,2])
ppv = confusion_matrix[2,2]/ (confusion_matrix[2,2] + confusion_matrix[1,2])
fpr = 1-tnr
fdr = 1 - ppv
f1_score = 2*((tpr * ppv)/(tpr + ppv))
perf_ls = list(accuracy = accuracy,
tpr = tpr,
tnr = tnr,
ppv = ppv,
fdr = fdr,
f1_score = f1_score)
return(perf_ls)
}
performance_metrics(conf_matri)
royal_mat
dplyr::filter(royal, call == "NO CALL")
dplyr::filter(royal, call == "NO CALL" & allele_frequency > .9)
conf_matri
fil_mat.na
fil_mat.na$pred = svm_pred
fil_mat.na
dplyr::filter(fil_mat.na, call != pred)
royal_mat
royal_mat = readRDS("Genexus_calls.RDS")
royal_mat
royal_mat$rowid = 1:nrow(royal_mat)
royal = dplyr::select(royal_mat, call, where(is.numeric))
royal
royal_mat = readRDS("Genexus_calls.RDS")
royal_mat$rowid = 1:nrow(royal_mat)
royal = dplyr::select(royal_mat, call,rowid, where(is.numeric))
royal
royal$call = ifelse(grepl("PRESENT",royal$call), "PRESENT", royal$call)
fil_mat = dplyr::filter(royal, call == "NO CALL" | grepl("PRESENT", call)) |>
dplyr::filter(allele_frequency > 0)
fil_mat$variant = paste0("v",1:nrow(fil_mat))
dplyr::filter(royal, call == "NO CALL" & allele_frequency > .9)
na.omit(fil_mat)
skimr::skim(fil_mat)
fil_mat = dplyr::filter(royal, call == "NO CALL" | grepl("PRESENT", call)) |>
dplyr::filter(allele_frequency > 0)
royal = dplyr::select(royal_mat, call,rowid, where(is.numeric))
library(rpart)
library(rpart.plot)
royal$call = ifelse(grepl("PRESENT",royal$call), "PRESENT", royal$call)
fil_mat = dplyr::filter(royal, call == "NO CALL" | grepl("PRESENT", call)) |>
dplyr::filter(allele_frequency > 0)
fil_mat$variant = paste0("v",1:nrow(fil_mat))
####### STATISTICAL TESTS
library(tidyverse)
fil_mat.na = na.omit(fil_mat)
fil_mat
skimr::skim(fil_mat)
fil_mat.na = na.omit(dplyr::select(fil_mat, call, rowid:alt_allele_read_counts))
fil_mat.na
fil_mat.na$call = as.factor(fil_mat.na$call )
library(e1071)
svm_model = svm(call~., data = fil_mat.na, kernel = 'linear')
svm_pred = predict(svm_model, fil_mat.na[,-c(1)])
conf_matri = table(fil_mat.na$call, svm_pred )
conf_matri
fil_mat.na$pred = svm_pred
fil_mat.na
fil_mat.na = na.omit(dplyr::select(fil_mat, call, rowid:alt_allele_read_counts))
fil_mat.na$call = as.factor(fil_mat.na$call )
library(e1071)
svm_model = svm(call~.-rowid, data = fil_mat.na, kernel = 'linear')
svm_pred = predict(svm_model, fil_mat.na[,-c(1:2)])
conf_matri = table(fil_mat.na$call, svm_pred )
fil_mat.na = na.omit(dplyr::select(fil_mat, call, rowid:alt_allele_read_counts))
fil_mat.na$call = as.factor(fil_mat.na$call )
library(e1071)
svm_model = svm(call~.-rowid, data = fil_mat.na, kernel = 'linear')
svm_pred = predict(svm_model, fil_mat.na[,-c(1)])
conf_matri = table(fil_mat.na$call, svm_pred )
fil_mat.na$pred = svm_pred
dplyr::filter(fil_mat.na, call !=pred)
dplyr::filter(fil_mat.na, call !=pred) |> dplyr::pull(rowid)
uneq_rows = dplyr::filter(fil_mat.na, call !=pred) |> dplyr::pull(rowid)
royal[uneq_rows,]
fil_mat.na
Unequal_calls = royal[uneq_rows,]
readr::write_tsv(Unequal_calls, "SVM_genexus_calls_do_not_equal.tsv")
Unequal_calls
royal[uneq_rows,]
Unequal_calls = royal_mat[uneq_rows,]
readr::write_tsv(Unequal_calls, "SVM_genexus_calls_do_not_equal.tsv")
Unequal_calls
meta_info = aggregate_META_information(cm)
panel_detection(meta_info)
fil_mat
royal_mat
table(royal_mat$call_details)
dplyr::count(royal_mat, call_details, sort = TRUE)
vcfs = lapply(vcffiles[90:95], read_vcf)
vcfs
dplyr::distinct(apply_FUNC_functions(fu)
)
quick_check(vcffiles[12])
quick_check(vcffiles[120])
quick_check = function(vcfpath){
fu = readVCF(vcfpath)
if(nrow(fu)>0){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows = cnv_parse(cnv_rows)
}
vcf = dplyr::filter(vcf, alt != "<CNV>")
#vcf = dplyr::filter(vcf, QUAL >= 10^1)
filtered = dplyr::select(vcf, 1:7, exon, FR, AF, QUAL, totalDepth) |>
tidyr::unnest(cols = AF)
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
quick_check(vcffiles[120])
quick_check = function(vcfpath){
fu = readVCF(vcfpath)
if(nrow(fu)>0){
vcf = dplyr::distinct(apply_FUNC_functions(fu))
vcf = dplyr::filter(vcf, funct != 'synonymous')
cnv_rows = dplyr::filter(fu, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows = cnv_parse(cnv_rows)
}
vcf = dplyr::filter(vcf, alt != "<CNV>")
#vcf = dplyr::filter(vcf, QUAL >= 10^1)
filtered = dplyr::select(vcf, 1:7, exon, FR, AF, QUAL, totalDepth) |>
tidyr::unnest(cols = c(AF,FR))
return(list(vcf = vcf,
selection = filtered,
CNV = cnv_rows))
}
}
quick_check(vcffiles[120])
quick_check(vcffiles[117])
quick_check(vcffiles[100])
quick_check(vcffiles[220])
vcffiles[220]
vcf_comment_section(vcffiles[220])
aggregate_META_information(vcf_comment_section(vcffiles[220]))
#' Title
#'
#' @param meta_info
#'
#' @return
#' @export
#'
#' @examples
panel_detection = function(meta_info){
panel_name = meta_info$IonReporter$WorkflowName
# INTEGRATE function that assigns panel name based on Look up table
if(panel_name == "RDX Ampliseq Germline Template HD"){
panel = 'Genexus DNA'
}else if(panel_name == "RDX Ampliseq Fusions Template"){
panel = 'Genexus RNA'
}else{
panel = "generic"
}
return(panel)
}
metainf = aggregate_META_information(vcf_comment_section(vcffiles[220]))
panel_detection(metainf)
#' Aggregate required information from VCF comment section
#'
#' @param comment_section
#'
#' @return
#' @export
#'
#' @examples
aggregate_META_information = function(comment_section){
analysis_name = pull_comment_value(comment_section, stringoi = 'IonReporterAnalysisName')
meta_info = list(IonReporter = list(AnalysisName = analysis_name,
Software_version = pull_comment_value(comment_section,
stringoi = 'IonReporterSoftwareVersion'),
Export_version = pull_comment_value(comment_section,
stringoi = 'IonReporterExportVersion'),
Workflow_version = pull_comment_value(comment_section,
stringoi = 'IonReporterWorkflowVersion'),
WorkflowName = pull_comment_value(comment_section,
stringoi = 'IonReporterWorkflowName')),
SampleInfo = list(disease = pull_comment_value(comment_section,
stringoi = 'sampleDiseaseType'),
tumor_cellularity_manual = pull_comment_value(comment_section,
stringoi = 'manually_input_percent_tumor_cellularity'),
tumor_cellularity_calculated = pull_comment_value(comment_section,
stringoi = 'calculated_tumor_cellularity')),
SequencingQC = list(percent_aligned_reads = pull_comment_value(comment_section,
stringoi = 'percent_aligned_reads'),
percent_non_zero_amplicons = pull_comment_value(comment_section,
stringoi = 'percent_non_zero_amplicons'),
total_read_count = pull_comment_value(comment_section, stringoi = 'total_read_count'),
median_reads_per_amplicon = pull_comment_value(comment_section,
stringoi = 'median_reads_per_amplicon'),
MAPD = pull_comment_value(comment_section,
stringoi = 'mapd'),
deamination_metric = pull_comment_value(comment_section,
stringoi = 'deamination_metric'))
)
return(meta_info)
}
panel_detection(metainf)
i = 221
quick_check(vcffiles[i])
vcf_comment_section(vcffiles[i])
aggregate_META_information(vcf_comment_section(vcffiles[i]))
metainf = aggregate_META_information(vcf_comment_section(vcffiles[i]))
panel_detection(metainf)
metainf
vavcf = VariantAnnotation::readVcfAsVRanges(vcffiles[i])
vavcf
vavcf = tibble::as_tibble(vavcf)
vavcf
vavcf$CALL
vavcf$call
vavcf
vavcf$QUAL
vavcf
vavcf$FR
vavcf
colnames(vavcf)
vavcf$INFO
vavcf
readr::read_tsv(vcffiles[i], comment = "##")
vcf = readr::read_tsv(vcffiles[i], comment = "##")
vcf
vcf$FILTER
table(vcf$FILTER)
vcf
vavcf
i = 22
metainf = aggregate_META_information(vcf_comment_section(vcffiles[i]))
vavcf = VariantAnnotation::readVcfAsVRanges(vcffiles[i])
vavcf
vavcf = VariantAnnotation::readVcfAsVRanges(vcffiles[i])
vavcf
tibble::as_tibble(vavcf)
vavcf
softFilterMatrix(vavcf)
softFilter(vavcf)
mcols(vavcf)
vcf_comment_section(vcffiles[i])
VariantAnnotation::readVcfAsVRanges(vcffiles[i])
readr::read_tsv(vcffiles[i])
readr::read_tsv(vcffiles[i], comment = "##")
readr::read_tsv(vcffiles[i], comment = "##")$FILTER
i = 222
metainf = aggregate_META_information(vcf_comment_section(vcffiles[i]))
vavcf = VariantAnnotation::readVcfAsVRanges(vcffiles[i])
metainf
panel_detection(metainf)
vavcf = VariantAnnotation::readVcfAsVRanges(vcffiles[i])
vavcf
readr::read_tsv(vcffiles[i], comment = "##")$FILTER
filter_column = readr::read_tsv(vcffiles[i], comment = "##")$FILTER
vavcf
tibble::as_tibble(vavcf)
vavcf = VariantAnnotation::readVcfAsVRanges(vcffiles[i])
vavcf = tibble::as_tibble(vavcf)
filter_column = readr::read_tsv(vcffiles[i], comment = "##")$FILTER
vavcf$FILTER = filter_column
vavcf
vavcf$FILTER
i = 22
metainf = aggregate_META_information(vcf_comment_section(vcffiles[i]))
panel_detection(metainf)
vavcf = VariantAnnotation::readVcfAsVRanges(vcffiles[i])
vavcf = tibble::as_tibble(vavcf)
vavcf
filter_column = readr::read_tsv(vcffiles[i], comment = "##")$FILTER
vavcf$FILTER = filter_column
vavcf$FILTER
vcffiles
i = 20
metainf = aggregate_META_information(vcf_comment_section(vcffiles[i]))
panel_detection(metainf)
vavcf = VariantAnnotation::readVcfAsVRanges(vcffiles[i])
vavcf = tibble::as_tibble(vavcf)
filter_column = readr::read_tsv(vcffiles[i], comment = "##")$FILTER
vavcf$FILTER = filter_column
vavcf
vavcf$FILTER
#' Uses VariantAnnotation package to read in VCF as GRanges object
#'
#' @param vcffilepath
#'
#' @return
#' @export
#'
#' @examples
readVCF = function(vcffilepath){
vavcf = VariantAnnotation::readVcfAsVRanges(vcffilepath)
vavcf = tibble::as_tibble(vavcf)
filter_column = readr::read_tsv(vcffilepath, comment = "##")$FILTER
vavcf$FILTER = filter_column
#vavcf = dplyr::filter(vavcf, AF !=0 | alt == "<CNV>")
vavcf$rowid = 1:nrow(vavcf)
return(vavcf)
}
#' Uses VariantAnnotation package to read in VCF as GRanges object
#'
#' @param vcffilepath
#'
#' @return
#' @export
#'
#' @examples
readVCF = function(vcffilepath){
vavcf = VariantAnnotation::readVcfAsVRanges(vcffilepath)
vavcf = tibble::as_tibble(vavcf)
filter_column = readr::read_tsv(vcffilepath, comment = "##")$FILTER
vavcf$FILTER = filter_column
#vavcf = dplyr::filter(vavcf, AF !=0 | alt == "<CNV>")
vavcf$rowid = 1:nrow(vavcf)
return(vavcf)
}
i = 220
vcffiles[i]
metainf = aggregate_META_information(vcf_comment_section(vcffiles[i]))
panel_detection(metainf)
readVCF(vcffiles[i])
vcf = readVCF(vcffiles[i])
vcf$FILTER
table(vcf$FILTER)
vcffiles[i]
i = 1
vcf = readVCF(vcffiles[i])
table(vcf$FILTER)
i = 1
testvcf = vcffiles[i]
testvcf
quick_check(testvcf)
testvcf = vcffiles[i]
metainf = aggregate_META_information(vcf_comment_section(testvcf))
panel_detection(metainf)
vcffiles
i = 69
testvcf = vcffiles[i]
metainf = aggregate_META_information(vcf_comment_section(testvcf))
panel_detection(metainf)
vcf = readVCF(testvcf)
table(vcf$FILTER)
vcf
vcf$FILTER
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
cnv_rows = dplyr::distinct(apply_FUNC_functions(cnv_rows))
cnv_rows
cnv_rows = cnv_parse(cnv_rows)
cnv_rows
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
cnv_rows
cnv_rows$FUNC
vavcf = VariantAnnotation::readVcfAsVRanges(testvcf)
vavcf
testvcf
testvcf
vcffiles[i]
vcffiles[70:80]
vcffiles[90:100]
vcffiles
i = 208
testvcf = vcffiles[i]
metainf = aggregate_META_information(vcf_comment_section(testvcf))
panel_detection(metainf)
quick_check(testvcf)
vcf = readVCF(testvcf)
table(vcf$FILTER)
i = 1
vcffiles[90:100]
testvcf = vcffiles[i]
metainf = aggregate_META_information(vcf_comment_section(testvcf))
panel_detection(metainf)
quick_check(testvcf)
vavcf = VariantAnnotation::readVcfAsVRanges(testvcf)
vavcf = tibble::as_tibble(vavcf)
filter_column = readr::read_tsv(testvcf, comment = "##")$FILTER
vavcf$FILTER = filter_column
vavcf$FILTER
vavcf = tibble::as_tibble(vavcf)
vcf = readr::read_tsv(vcffiles[i], comment = "##")
table(vcf$FILTER)
vavcf$INFO
vavcf$FR
vcf
vcf |>
dplyr::filter(FILTER == 'PASS')
i = 69
vcffiles[90:100]
testvcf = vcffiles[i]
metainf = aggregate_META_information(vcf_comment_section(testvcf))
panel_detection(metainf)
quick_check(testvcf)
i = 222
vcffiles[90:100]
testvcf = vcffiles[i]
testvcf
metainf = aggregate_META_information(vcf_comment_section(testvcf))
panel_detection(metainf)
quick_check(testvcf)
vavcf = VariantAnnotation::readVcfAsVRanges(testvcf)
vavcf = tibble::as_tibble(vavcf)
filter_column = readr::read_tsv(testvcf, comment = "##")$FILTER
vavcf$FILTER = filter_column
vavcf$FILTER
vavcf |>
dplyr::filter(FILTER == 'PASS')
vavcf$AF
vavcf |>
dplyr::filter(FILTER == 'PASS' & AF != 0)
table(vavcf$softFilterMatrix.NOCALL)
vavcf |>
dplyr::filter(FILTER == 'PASS' & AF != 0 & softFilterMatrix.NOCALL == FALSE)
vavcf |>
dplyr::filter(FILTER == 'PASS' & AF != 0) |>
dplyr::filter(softFilterMatrix.NOCALL == FALSE)
vavcf |>
dplyr::filter(FILTER == 'PASS' & AF != 0)
table(vavcf$softFilterMatrix.NOCALL)
vavcf |>
dplyr::filter(FILTER == 'PASS' & AF != 0) |>
dplyr::filter(softFilterMatrix.NOCALL == TRUE)
table(vavcf$softFilterMatrix.NOCALL)
panel_detection(metainf)
vavcf
vavcf = VariantAnnotation::readVcfAsVRanges(testvcf)
vavcf
vavcf = VariantAnnotation::readVcfAsVRanges(testvcf)
vavcf = tibble::as_tibble(vavcf)
filter_column = readr::read_tsv(testvcf, comment = "##")$FILTER
vavcf$FILTER = filter_column
vavcf$totalDepth
