cnv_rows = dplyr::select(cnv_rows, -origPos)
cnv_rows = dplyr::arrange(cnv_rows, desc(RAW_CN))
}
# COMMENT SECTION
cm = vcf_comment_section(vcfpath = vcfpath )
metainf = aggregate_META_information(cm)
vcf_file = metainf$vcf_path
analysis_name = metainf$IonReporter$AnalysisName
## Output files
if(nrow(vcf) > 0){
vcf = attach_ID(vcf, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(vcf, file = filepaths$path_file_complete)
}
#' Attach sample ID from original vcf path and analysis name to output dataframes.
#' These entries serve as unique identifiers across tables
#' @param dataframe_oi
#' @param sample_id
#' @param analysis_name
#'
#' @return
#' @export
#'
#' @examples
attach_ID = function(dataframe_oi, vcf_file, analysis_name){
dataframe_oi$vcf_file = vcf_file
dataframe_oi$analysis_name = analysis_name
return(dataframe_oi)
}
filepaths = generate_paths(vcfpath = vcfpath)
## Read in file
vcf = VCFparse::readVCF(vcfpath)
# Parse FUNC
if(nrow(vcf) > 0){
vcf = combine_orig_with_FUNC_extracts(vcf)
}
## remove double columns
vcf =  dplyr::select(vcf, -contains(".1"))
vcf =  dplyr::select(vcf, -FUNC)
# Generate tables
vcf$variant_type = gsub("[^[:alnum:] ]", "", vcf$variant_type)
vcf$protein = gsub("\\[|\\]", "", vcf$protein)
vcf$transcript = gsub("\\[|\\]", "", vcf$transcript)
vcf = dplyr::relocate(vcf, rowid)
# SNV table
snv = dplyr::filter(vcf, variant_type != 'synonymous' & alt != "<CNV>")
## Remove zero AF entries, especially important for Genexus
if("AF" %in% colnames(snv)){
snv = dplyr::filter(snv, AF != 0)
}
snv = dplyr::relocate(snv, rowid)
#   dplyr::mutate_all(as.character) |>
# tibble::as_tibble(vcf) |>
#   tidyr::pivot_longer(-gene)|>
#   dplyr::filter(grepl("\\[", value)) |>
#   dplyr::filter(name != 'FUNC')
# CNV entries only
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = cnv_parse(cnv_rows)
cnv_rows = dplyr::select(cnv_rows, -origPos)
cnv_rows = dplyr::arrange(cnv_rows, desc(RAW_CN))
}
# COMMENT SECTION
cm = vcf_comment_section(vcfpath = vcfpath )
metainf = aggregate_META_information(cm)
vcf_file = metainf$vcf_path
analysis_name = metainf$IonReporter$AnalysisName
## Output files
if(nrow(vcf) > 0){
vcf = attach_ID(vcf, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(vcf, file = filepaths$path_file_complete)
}
if(nrow(snv) > 0){
snv = attach_ID(snv, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(snv, file = filepaths$path_file_snv)
}
if(nrow(cnv_rows) > 0){
cnv_rows = attach_ID(cnv_rows, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(cnv_rows, file = filepaths$path_file_cnv)
}
write_out_META_information(metainf, filename = filepaths$path_file_info)
filepaths = lapply(filepaths, function(x) ifelse(file.exists(x), x, NA))
filepath_df = data.frame(file = names(filepaths),
filepath  = unlist(unname(filepaths)))
filepath_df = attach_ID(filepath_df, vcf_file = vcf_file, analysis_name = analysis_name)
devtools::document()
getwd()
setwd(..)
setwd('..)
setwd('..')
devtools::create(VariantAnnotation)
devtools::create('VariantAnnotation)
devtools::create('VariantAnnotation')
vcffiles = list.files(path = "VCF", pattern = '*.vcf', recursive = TRUE, full.names = TRUE)
vcffiles = grep("/Variants/", vcffiles, value = TRUE, invert = TRUE)
vcffiles = grep("SmallVariants", vcffiles, value = TRUE, invert = TRUE)
vcffiles = grep("SolidTumor-Fusions", vcffiles, value = TRUE, invert = TRUE)
testfiles
testfiles = vcffiles[c(180:220)]
vcfpath = (testfiles[38])
vcfpath
## Retrieve dirname and generate filepaths
filepaths = generate_paths(vcfpath = vcfpath)
## VCFparse pipeline
library(VCFparse)
## Retrieve dirname and generate filepaths
filepaths = generate_paths(vcfpath = vcfpath)
## Read in file
vcf = VCFparse::readVCF(vcfpath)
# Parse FUNC
if(nrow(vcf) > 0){
vcf = combine_orig_with_FUNC_extracts(vcf)
}
## remove double columns
vcf =  dplyr::select(vcf, -contains(".1"))
vcf =  dplyr::select(vcf, -FUNC)
# Generate tables
vcf$variant_type = gsub("[^[:alnum:] ]", "", vcf$variant_type)
vcf$protein = gsub("\\[|\\]", "", vcf$protein)
vcf$transcript = gsub("\\[|\\]", "", vcf$transcript)
vcf = dplyr::relocate(vcf, rowid)
# SNV table
snv = dplyr::filter(vcf, variant_type != 'synonymous' & alt != "<CNV>")
## Remove zero AF entries, especially important for Genexus
if("AF" %in% colnames(snv)){
snv = dplyr::filter(snv, AF != 0)
}
snv = dplyr::relocate(snv, rowid)
# CNV entries only
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = cnv_parse(cnv_rows)
cnv_rows = dplyr::select(cnv_rows, -origPos)
cnv_rows = dplyr::arrange(cnv_rows, desc(RAW_CN))
}
# COMMENT SECTION
cm = vcf_comment_section(vcfpath = vcfpath )
metainf = aggregate_META_information(cm)
vcf_file = metainf$vcf_path
analysis_name = metainf$IonReporter$AnalysisName
## Output files
if(nrow(vcf) > 0){
vcf = attach_ID(vcf, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(vcf, file = filepaths$path_file_complete)
}
if(nrow(snv) > 0){
snv = attach_ID(snv, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(snv, file = filepaths$path_file_snv)
}
if(nrow(cnv_rows) > 0){
cnv_rows = attach_ID(cnv_rows, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(cnv_rows, file = filepaths$path_file_cnv)
}
write_out_META_information(metainf, filename = filepaths$path_file_info)
library(yaml)
write_out_META_information(metainf, filename = filepaths$path_file_info)
filepaths = lapply(filepaths, function(x) ifelse(file.exists(x), x, NA))
filepath_df = data.frame(file = names(filepaths),
filepath  = unlist(unname(filepaths)))
filepath_df = attach_ID(filepath_df, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(filepath_df, filepaths$path_filepath)
ilepath_df
filepath_df
(testfiles[33])
(testfiles[12])
vcfpath = (testfiles[12])
## Retrieve dirname and generate filepaths
filepaths = generate_paths(vcfpath = vcfpath)
## Read in file
vcf = VCFparse::readVCF(vcfpath)
# Parse FUNC
if(nrow(vcf) > 0){
vcf = combine_orig_with_FUNC_extracts(vcf)
}
## remove double columns
vcf =  dplyr::select(vcf, -contains(".1"))
vcf =  dplyr::select(vcf, -FUNC)
# Generate tables
vcf$variant_type = gsub("[^[:alnum:] ]", "", vcf$variant_type)
vcf$protein = gsub("\\[|\\]", "", vcf$protein)
vcf$transcript = gsub("\\[|\\]", "", vcf$transcript)
vcf = dplyr::relocate(vcf, rowid)
# SNV table
snv = dplyr::filter(vcf, variant_type != 'synonymous' & alt != "<CNV>")
## Remove zero AF entries, especially important for Genexus
if("AF" %in% colnames(snv)){
snv = dplyr::filter(snv, AF != 0)
}
snv = dplyr::relocate(snv, rowid)
#   dplyr::mutate_all(as.character) |>
# tibble::as_tibble(vcf) |>
#   tidyr::pivot_longer(-gene)|>
#   dplyr::filter(grepl("\\[", value)) |>
#   dplyr::filter(name != 'FUNC')
# CNV entries only
cnv_rows = dplyr::filter(vcf, alt == "<CNV>")
if(nrow(cnv_rows) > 0){
cnv_rows = cnv_parse(cnv_rows)
cnv_rows = dplyr::select(cnv_rows, -origPos)
cnv_rows = dplyr::arrange(cnv_rows, desc(RAW_CN))
}
# COMMENT SECTION
cm = vcf_comment_section(vcfpath = vcfpath )
metainf = aggregate_META_information(cm)
vcf_file = metainf$vcf_path
analysis_name = metainf$IonReporter$AnalysisName
## Output files
if(nrow(vcf) > 0){
vcf = attach_ID(vcf, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(vcf, file = filepaths$path_file_complete)
}
if(nrow(snv) > 0){
snv = attach_ID(snv, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(snv, file = filepaths$path_file_snv)
}
if(nrow(cnv_rows) > 0){
cnv_rows = attach_ID(cnv_rows, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(cnv_rows, file = filepaths$path_file_cnv)
}
write_out_META_information(metainf, filename = filepaths$path_file_info)
filepaths = lapply(filepaths, function(x) ifelse(file.exists(x), x, NA))
filepath_df = data.frame(file = names(filepaths),
filepath  = unlist(unname(filepaths)))
filepath_df = attach_ID(filepath_df, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(filepath_df, filepaths$path_filepath)
filepath_df
readr::write_tsv(filepath_df, filepaths$path_filepath)
filepaths$path_filepath
## Retrieve dirname and generate filepaths
filepaths = generate_paths(vcfpath = vcfpath)
filepaths
filepaths$path_filepath
filepaths
filepaths[1:5] = lapply(filepaths[1:5], function(x) ifelse(file.exists(x), x, NA))
filepaths
filepath_df = data.frame(file = names(filepaths),
filepath  = unlist(unname(filepaths)))
filepath_df = attach_ID(filepath_df, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(filepath_df, filepaths$path_filepath)
vcfpath
parsed_filepaths
getwd()
devtools::document()
parsed_filepaths
parsed_fp = parsed_filepaths('/Users/manzo/USB/USB_Diagnostics/VCFparse/VCF/VCFs/Y1456_1_B2023.18755_OCAPlus_w518_output')
parsed_fp
parsed_fp
#' Parse VCF -- create CNV
#'
#' @param vcf
#'
#' @return
#' @export
#'
#' @examples
parse_vcfpath_return_metainformation = function(vcfpath){
cm = vcf_comment_section(vcfpath = vcfpath )
metainf = aggregate_META_information(cm)
return(metainf)
}
gc()
gc()
parsed_fp
attach_ID
parsed_fp
parsed_fp
lapply(parsed_fp, function(x))
lapply(parsed_fp, function(x))
lapply(parsed_fp, function(x) x )
write_parsed_output
#' Write out VCF parse information
#'
#' @param vcf
#' @param vcf_path
#' @param parsed_fp
#'
#' @return
#' @export
#'
#' @examples
write_parsed_output = function(vcf, vcf_path, parsed_fp){
metainf = parse_vcfpath_return_metainformation(vcfpath)
analysis_name = metainf$IonReporter$AnalysisName
## Output files
if(nrow(vcf) > 0){
vcf = attach_ID(vcf, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(vcf, file = parsed_fp$parsed_complete)
}
snv = parse_vcf_return_snv(vcf)
if(nrow(snv) > 0){
snv = attach_ID(snv, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(snv, file = parsed_fp$parsed_snv)
}
cnv = parse_vcf_return_cnv(vcf)
if(nrow(cnv) > 0){
cnv = attach_ID(cnv, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(cnv, file = parsed_fp$parsed_cnv)
}
## Meta information
write_out_META_information(metainf, filename = parsed_fp$parsed_info)
## Parsed filepath info
write_parsed_fp_txt(parsed_fp)
}
devtools::document()
vcf_file
#' Write out VCF parse information
#'
#' @param vcf
#' @param vcf_path
#' @param parsed_fp
#'
#' @return
#' @export
#'
#' @examples
write_parsed_output = function(vcf, vcf_path, parsed_fp){
metainf = parse_vcfpath_return_metainformation(vcfpath)
analysis_name = metainf$IonReporter$AnalysisName
vcf_file = basename(vcf_path)
## Output files
if(nrow(vcf) > 0){
vcf = attach_ID(vcf, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(vcf, file = parsed_fp$parsed_complete)
}
snv = parse_vcf_return_snv(vcf)
if(nrow(snv) > 0){
snv = attach_ID(snv, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(snv, file = parsed_fp$parsed_snv)
}
cnv = parse_vcf_return_cnv(vcf)
if(nrow(cnv) > 0){
cnv = attach_ID(cnv, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(cnv, file = parsed_fp$parsed_cnv)
}
## Meta information
write_out_META_information(metainf, filename = parsed_fp$parsed_info)
## Parsed filepath info
write_parsed_fp_txt(parsed_fp, vcf_file = vcf_file, analysis_name = analysis_name)
}
write_out_META_information
parse_vcfpath_return_metainformation
metainf
parse_vcf_return_snv
parse_vcf_return_cnv
parsed_fp$parsed_cnv
vcf_file
print("basename", "hello")
print("s", "hello")
parsed_fp$parsed_complete
write_parsed_fp_txt
## Parsed filepath info
write_parsed_fp_txt(parsed_fp, vcf_file = vcf_file, analysis_name = analysis_name)
#' Write out parsed filepath information
#'
#' @param parsed_fp
#'
#' @return
#' @export
#'
#' @examples
write_parsed_fp_txt = function(parsed_fp, vcf_file, analysis_name){
parsed_fp = lapply(parsed_fp, function(x) ifelse(file.exists(x), x, NA))
filepath_df = data.frame(file = names(parsed_fp),
filepath  = unlist(unname(parsed_fp)))
filepath_df = attach_ID(filepath_df, vcf_file = vcf_file, analysis_name = analysis_name)
readr::write_tsv(filepath_df, file = parsed_fp$parsed_fp)
}
write_parsed_fp_txt
## Parsed filepath info
write_parsed_fp_txt(parsed_fp, vcf_file = vcf_file, analysis_name = analysis_name)
## Parsed filepath info
write_parsed_fp_txt(parsed_fp, vcf_file = 'no1cares', analysis_name = 'no1cares')
parsed_fp = lapply(parsed_fp, function(x) ifelse(file.exists(x), x, NA))
parsed_fp
write_parsed_fp_txt
devtools::document()
parse_vcf_return_cnv
devtools::document()
getdw()
getwd()
setwd('..')
devtools::create("VariantReporting")
df  = readr::read_tsv("/Users/manzo/USB/USB_Diagnostics/VCFparse/testing/Rpeated_sel.tsv")
df
df_mat = dplyr::select(df, QUAL:FSRR) |> dplyr::mutate_all(as.numeric())
df_mat = dplyr::select(df, QUAL:FSRR) |> dplyr::mutate_all(as.numeric)
df_mat
df_mat = as.matrix(df_mat)
df_mat
rownames(df_mat) = pasteo(df$uid, 1:nrow(df))
rownames(df_mat) = paste0(df$uid, 1:nrow(df))
rownames(df_mat)
metadata = df
rownames(metadata) = paste0(df$uid, 1:nrow(df))
metadata = df |> as.data.frame()
rownames(metadata) = paste0(df$uid, 1:nrow(df))
PCAtools::pca(df_mat, metadata = metadata, scale = TRUE)
t(df_mat)
pcap = PCAtools::pca(t(df_mat), metadata = metadata, scale = TRUE)
df_mat
head(df_mat)
pcap = PCAtools::pca((df_mat), metadata = metadata, scale = TRUE)
tdf_mat = df_mat |> scale() |> t()
pcap = PCAtools::pca(tdf_mat, metadata = metadata, scale = FALSE)
str(tdf_mat)
replace_na(df_mat) = 0
replace_na(df_mat)
is.na(df_mat)
table(is.na(df_mat))
df_mat[is.na(df_mat)] = 0
tdf_mat = df_mat |> scale() |> t()
pcap = PCAtools::pca(tdf_mat, metadata = metadata, scale = FALSE)
pcap
PCAtools::biplot(pcap, colby = "repeated")
PCAtools::biplot(pcap, colby = "repeated",
legendPosition = 'top')
PCAtools::biplot(pcap, colby = "repeated",
legendPosition = 'top') + geom_point(alpha = .3)
library(ggplot2)
PCAtools::biplot(pcap, colby = "repeated",
legendPosition = 'top') + geom_point(alpha = .3)
PCAtools::biplot(pcap, colby = "repeated",
lab = NULL,
legendPosition = 'top') + geom_point(alpha = .3)
PCAtools::biplot(pcap, colby = "repeated",
lab = NULL,
legendPosition = 'top') + geom_point(aes(alpha = .3))
PCAtools::biplot(pcap, colby = "repeated",
lab = NULL,
legendPosition = 'top')
tdf_mat
df_mat |> scale()
head(df_mat |> scale())
PCAtools::biplot(pcap, colby = "repeated",
lab = NULL,
legendPosition = 'top',
showLoadings = TRUE)
df
df  = readr::read_tsv("/Users/manzo/USB/USB_Diagnostics/VCFparse/testing/Rpeated_sel.tsv")
df
df
df |>
dplyr::count(uid, sort = TRUE)
df |>
dplyr::count(uid, sort = TRUE) |>
dplyr::filter(n > 30)
df |>
dplyr::count(uid, sort = TRUE) |>
dplyr::filter(n > 30) |>
dplyr::pull(uid)
uid_30 = df |>
dplyr::count(uid, sort = TRUE) |>
dplyr::filter(n > 30) |>
dplyr::pull(uid)
df |>
dplyr::mutate(repeated = ifelse(uid %in% uid_30, TRUE, FALSE))
df = df |>
dplyr::mutate(repeated = ifelse(uid %in% uid_30, TRUE, FALSE))
df = df |>
dplyr::mutate(repeated = ifelse(uid %in% uid_30, TRUE, FALSE))
df_mat = dplyr::select(df, QUAL:FSRR) |> dplyr::mutate_all(as.numeric)
df_mat = as.matrix(df_mat)
rownames(df_mat) = paste0(df$uid, 1:nrow(df))
metadata = df |> as.data.frame()
rownames(metadata) = paste0(df$uid, 1:nrow(df))
df_mat[is.na(df_mat)] = 0
tdf_mat = df_mat |> scale() |> t()
pcap = PCAtools::pca(tdf_mat, metadata = metadata, scale = FALSE)
head(df_mat |> scale())
library(ggplot2)
PCAtools::biplot(pcap, colby = "repeated",
lab = NULL,
legendPosition = 'top',
showLoadings = TRUE)
tdf_mat = df_mat |> scale()
tdf_mat
tdf_mat$AF
df_mat = dplyr::select(df, QUAL:FSRR) |> dplyr::mutate_all(as.numeric)
rownames(df_mat) = paste0(df$uid, 1:nrow(df))
df_mat = dplyr::select(df, QUAL:FSRR) |> dplyr::mutate_all(as.numeric)
df_mat = as.data.frame(df_mat)
rownames(df_mat) = paste0(df$uid, 1:nrow(df))
metadata = df |> as.data.frame()
rownames(metadata) = paste0(df$uid, 1:nrow(df))
df_mat[is.na(df_mat)] = 0
tdf_mat = df_mat |> scale()
tdf_mat$AF
tdf_mat
df_mat = dplyr::select(df, QUAL:FSRR) |> dplyr::mutate_all(as.numeric)
df_mat = as.data.frame(df_mat)
rownames(df_mat) = paste0(df$uid, 1:nrow(df))
metadata = df |> as.data.frame()
rownames(metadata) = paste0(df$uid, 1:nrow(df))
df_mat[is.na(df_mat)] = 0
df_mat
tdf_mat = df_mat |> scale()
as.data.frame(tdf_mat)$AF
as.data.frame(tdf_mat)$AF = df_mat$AF
tdf_mat = as.data.frame(tdf_mat)
tdf_mat$AF
tdf_mat$AF = df_mat$AF
tdf_mat
tdf_mat$AF
tdf_mat = t(tdf_mat)
tdf_mat = as.matrix(tdf_mat)
pcap = PCAtools::pca(tdf_mat, metadata = metadata, scale = FALSE)
head(df_mat |> scale())
library(ggplot2)
PCAtools::biplot(pcap, colby = "repeated",
lab = NULL,
legendPosition = 'top',
showLoadings = TRUE)
